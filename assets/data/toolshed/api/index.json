{"hash":"14e186fd360947c1255e65c919a062692f477385","data":{"article":{"id":"d1b070c3df2637a70f7818f54213f4c5","title":"The Tool Shed API","tease":"","image":"","images":{},"category":null,"contact":"","date":null,"content":"<div class='center'> <a href='http://toolshed.g2.bx.psu.edu'>![Galaxy Main Tool Shed](/src/images/logos/ToolShed.jpg)</a> </div>\n<p>The RESTful Tool Shed API currently provides the following features. These API features will be enhanced over time.</p>\n<ul>\n<li>GET <strong>/api/repositories</strong>\nReturns a list of dictionaries that include information about all repositories.</li>\n<li>GET <strong>/api/repositories/{encoded_repository_id}</strong>\nReturns a dictionary that includes information about a specified repository.</li>\n<li>\n<p>GET <strong>/api/repositories/get_ordered_installable_revisions</strong></p>\n<ul>\n<li>param name: the name of the repository</li>\n<li>param owner: the owner of the repository\nReturns the ordered list of changeset revision hash strings that are associated with installable revisions. As in the changelog, the list is ordered oldest to newest.</li>\n</ul>\n</li>\n<li>\n<p>GET <strong>/api/repositories/get_repository_revision_install_info</strong></p>\n<ul>\n<li>param name: the name of the repository</li>\n<li>param owner: the owner of the repository</li>\n<li>param changset_revision: the changset_revision of the <code>RepositoryMetadata</code> object associated with the repository\nReturns a list of the following dictionaries:</li>\n<li>a dictionary defining the repository</li>\n<li>a dictionary defining the repository revision (<code>RepositoryMetadata</code>)</li>\n<li>a dictionary including the additional information required to install the repository</li>\n</ul>\n</li>\n<li>\n<p>GET <strong>/api/repository_revisions</strong>\nReturns a (possibly filtered) list of dictionaries that include information about all repository revisions. The following parameters can be used to filter the list.</p>\n<ul>\n<li>downloadable ( True / False )</li>\n<li>malicious ( True / False )</li>\n<li>tools_functionally_correct ( True / False )</li>\n<li>missing_test_components ( True / False )</li>\n<li>do_not_test ( True / False )</li>\n<li>includes_tools ( True / False )</li>\n<li>test_install_error ( True / False )</li>\n<li>skip_tool_test ( True / False )</li>\n</ul>\n</li>\n<li>GET <strong>/api/repository_revisions/{encoded_repository_metadata_id}</strong>\nReturns a dictionary that includes information about a specified repository revision.</li>\n<li>\n<p>GET <strong>/api/repository_ids_for_setting_metadata</strong>\nReturns a list of repository ids ordered for setting metadata.</p>\n<ul>\n<li>param my_writable: optional boolean value to enable filtering the list to those repositories for which the current user has write authorization.</li>\n</ul>\n</li>\n<li>\n<p>POST <strong>/api/reset_metadata_on_repositories/{payload}</strong>\nResets all metadata on specified repositories in the Tool Shed in an \"orderly fashion\". The order in which metadata is reset is repositories of type tool_dependecy_definition first followed by repositories of type unrestricted.</p>\n<ul>\n<li>param my_writable: optional boolean value to enable filtering the list to those repositories for which the current user has write authorization.</li>\n<li>param encoded_ids_to_skip: optional list of encoded repository ids for repositories that should not be processed.</li>\n<li>param skip_file: optional local file name that contains the encoded repository ids associated with repositories to skip. This param can be used as an alternative to the above encoded_ids_to_skip.</li>\n</ul>\n</li>\n<li>\n<p>POST <strong>/api/reset_metadata_on_repository/{payload}</strong>\nResets all metadata on a specified repository in the Tool Shed.</p>\n<ul>\n<li>param repository_id: required encoded id of the repository on which metadata is to be reset.</li>\n</ul>\n</li>\n<li>POST <strong>/api/repository_revisions/{encoded_repository_metadata_id}/{payload}</strong>\nUpdates the value of specified columns of the repository_metadata table based on the key/value pairs in payload dictionary. This API call requires the use of an API key that guarantees the user is a tool shed administrator.</li>\n</ul>\n<h1 id=\"galaxy-api-features-for-the-tool-shed\"><a href=\"#galaxy-api-features-for-the-tool-shed\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Galaxy API features for the Tool Shed</h1>\n<p>The RESTful Galaxy API includes the following features that work with the Tool Shed. These API features will be enhanced over time.</p>\n<ul>\n<li>GET <strong>/api/tool_shed_repositories</strong>\nReturns a list of dictionaries containing information about installed tool shed repositories.</li>\n<li>GET <strong>/api/tool_shed_repositories/{encoded_tool_shed_repository_id}</strong>\nReturns a dictionary containing information about a specified installed tool_shed_repository.</li>\n<li>\n<p>POST <strong>/api/tool_shed_repositories/new/install_repository_revision</strong></p>\n<ul>\n<li>param key: the current Galaxy admin user's API key\nThe following parameters are included in the payload.</li>\n<li>param tool_shed_url (required): the base URL of the Tool Shed from which to install the repository</li>\n<li>param name (required): the name of the repository</li>\n<li>param owner (required): the owner of the repository</li>\n<li>param changeset_revision (required): the changeset_revision of the <code>RepositoryMetadata</code> object associated with the repository</li>\n<li>param new_tool_panel_section_label (optional): label of a new section to be added to the Galaxy tool panel in which to load tools contained in the repository. Either this parameter must be an empty string or the tool_panel_section_id parameter must be an empty string or both must be an empty string (both cannot be used simultaneously).</li>\n<li>param tool_panel_section_id (optional): id of the Galaxy tool panel section in which to load tools contained in the repository. If this parameter is an empty string and the above new_tool_panel_section_label parameter is an empty string, tools will be loaded outside of any sections in the tool panel. Either this parameter must be an empty string or the tool_panel_section_id parameter must be an empty string of both must be an empty string (both cannot be used simultaneously).</li>\n<li>param install_repository_dependencies (optional): Set to True if you want to install repository dependencies defined for the specified repository being installed. The default setting is False.</li>\n<li>param install_tool_dependencies (optional): Set to True if you want to install tool dependencies defined for the specified repository being installed. The default setting is False.</li>\n<li>param shed_tool_conf (optional): The shed-related tool panel configuration file configured in the \"tool_config_file\" setting in the Galaxy config file (e.g., galaxy.ini). At least one shed-related tool panel config file is required to be configured. Setting this parameter to a specific file enables you to choose where the specified repository will be installed because the tool_path attribute of the <code>&#x3C;toolbox></code> from the specified file is used as the installation location (e.g., <code>&#x3C;toolbox tool\\_path=\"../shed\\_tools\"></code>). If this parameter is not set, a shed-related tool panel configuration file will be selected automatically.\nThe script contributed by Bjorn Gruening in ~/scripts/api/install_tool_shed_repositories.py is a useful mechanism for installing repositories into Galaxy from the Tool Shed. Additional mechanisms will be provided over time.</li>\n</ul>\n</li>\n<li>\n<p>GET <strong>/api/tool_shed_repositories/{encoded_tool_shed_repository_id}/exported_workflows</strong>\nReturn a list of dictionaries containing information about the exported workflows contained within a Tool Shed repository.</p>\n<ul>\n<li>param id: the encoded id of the Tool Shed repository.</li>\n</ul>\n</li>\n<li>\n<p>POST <strong>/api/tool_shed_repositories/import_workflow/{payload}</strong>\nImport the specified exported workflow contained in the specified installed tool shed repository into Galaxy.</p>\n<ul>\n<li>param id: the encoded id of the Tool Shed repository.</li>\n<li>param index: optional index location of the workflow tuple in the list of exported workflows stored in the metadata for the installed Tool Shed repository.</li>\n</ul>\n</li>\n<li>\n<p>POST <strong>/api/tool_shed_repositories/import_workflows</strong>\nImport all of the exported workflows contained in the specified installed Tool Shed repository into Galaxy.</p>\n<ul>\n<li>param id: the encoded id of the Tool Shed repository.</li>\n</ul>\n</li>\n<li>\n<p>POST <strong>/api/tool_shed_repositories/{encoded_tool_shed_repository_id}/repair_repository_revision</strong> - Repair a specified repository revision (and all if it's dependencies) previously installed into Galaxy.</p>\n<ul>\n<li>param tool_shed_url (required): the base URL of the Tool Shed from which the Repository was installed</li>\n<li>param name (required): the name of the Repository</li>\n<li>param owner (required): the owner of the Repository</li>\n<li>param changeset_revision (required): the changeset_revision of the <code>RepositoryMetadata</code> object associated with the Repository</li>\n</ul>\n</li>\n<li>POST <strong>/api/tool_shed_repositories/reset_metadata_on_installed_repositories</strong>\nResets all metadata on all repositories installed into Galaxy in an orderly fashion where installed repositories of type TOOL_DEPENDENCY_DEFINITION are processed before installed repositories of type UNRESTRICTED..</li>\n</ul>\n"}},"context":{}}