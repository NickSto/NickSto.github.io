{"hash":"c32ecfdb33b075b0057598b5b9118f3554a398cf","data":{"article":{"id":"c1b6f505b57bf4cd463ec7834c816ccf","title":"","tease":"","image":"","images":{},"category":null,"contact":"","date":null,"content":"<p>Slides are available here: <a href=\"https://depot.galaxyproject.org/hub/attachments/documents/presentations/gcc2012/WS1_blankenberg_gcc_2012_integrating_tools_and_data_sources.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">Slides</a>.</p>\n<p>maf_slice.py:\n`<code></code>\n#!/usr/bin/env python</p>\n<p>\"\"\"\nModified from interval2maf.py for teaching workshops</p>\n<p>Reads a list of intervals and a maf. Produces a new maf containing the\nblocks or parts of blocks in the original that overlapped the intervals.</p>\n<p>If a MAF file, not UID, is provided the MAF file is indexed before being processed.</p>\n<p>NOTE: If two intervals overlap the same block it will be written twice.</p>\n<p>usage: %prog maf_file [options]\n-d, --dbkey=d: Database key, ie hg17\n-c, --chromCol=c: Column of Chr\n-s, --startCol=s: Column of Start\n-e, --endCol=e: Column of End\n-S, --strandCol=S: Column of Strand\n-t, --mafType=t: Type of MAF source to use\n-m, --mafFile=m: Path of source MAF file, if not using cached version\n-I, --mafIndex=I: Path of precomputed source MAF file index, if not using cached version\n-i, --interval_file=i:       Input interval file\n-o, --output_file=o:      Output MAF file\n-p, --species=p: Species to include in output\n-P, --split_blocks_by_species=P: Split blocks by species\n-r, --remove_all_gap_columns=r: Remove all Gap columns\n-l, --indexLocation=l: Override default maf_index.loc file\n-z, --mafIndexFile=z: Directory of local maf index file ( maf_index.loc or maf_pairwise.loc )\n\"\"\"</p>\n<p>#Dan Blankenberg\nfrom galaxy import eggs\nimport pkg_resources; pkg_resources.require( \"bx-python\" )\nfrom bx.cookbook import doc_optparse\nimport bx.align.maf\nimport bx.intervals.io\nfrom galaxy.tools.util import maf_utilities\nimport sys</p>\n<p>assert sys.version_info[:2] >= ( 2, 4 )</p>\n<p>def <strong>main</strong>():\nindex = index_filename = None\nmincols = 0</p>\n<pre><code>#Parse Command Line\noptions, args = doc_optparse.parse( __doc__ )\n\nif options.dbkey: dbkey = options.dbkey\nelse: dbkey = None\nif dbkey in [None, \"?\"]:\n    maf_utilities.tool_fail( \"You must specify a proper build in order to extract alignments. You can specify your genome build by clicking on the pencil icon associated with your interval file.\" )\n\nspecies = maf_utilities.parse_species_option( options.species )\n\nif options.chromCol: chromCol = int( options.chromCol ) - 1\nelse: \n    chromCol = 0\n\nif options.startCol: startCol = int( options.startCol ) - 1\nelse: \n    startCol = 1\n\nif options.endCol: endCol = int( options.endCol ) - 1\nelse: \n    endCol = 2\n\nif options.strandCol: strandCol = int( options.strandCol ) - 1\nelse: \n    strandCol = -1\n\nif options.interval_file: interval_file = options.interval_file\nelse: \n    maf_utilities.tool_fail( \"Input interval file has not been specified.\" )\n\nif options.output_file: output_file = options.output_file\nelse: \n    maf_utilities.tool_fail( \"Output file has not been specified.\" )\n\nsplit_blocks_by_species = remove_all_gap_columns = False\nif options.split_blocks_by_species and options.split_blocks_by_species == 'split_blocks_by_species':\n    split_blocks_by_species = True\n    if options.remove_all_gap_columns and options.remove_all_gap_columns == 'remove_all_gap_columns':\n        remove_all_gap_columns = True\nelse:\n    remove_all_gap_columns = True\n#Finish parsing command line\n\n#Open indexed access to MAFs\nif options.mafType:\n    if options.indexLocation:\n        index = maf_utilities.maf_index_by_uid( options.mafType, options.indexLocation )\n    else:\n        index = maf_utilities.maf_index_by_uid( options.mafType, options.mafIndexFile )\n    if index is None:\n        maf_utilities.tool_fail( \"The MAF source specified (%s) appears to be invalid.\" % ( options.mafType ) )\nelif options.mafFile:\n    index, index_filename = maf_utilities.open_or_build_maf_index( options.mafFile, options.mafIndex, species = [dbkey] )\n    if index is None:\n        maf_utilities.tool_fail( \"Your MAF file appears to be malformed.\" )\nelse:\n    maf_utilities.tool_fail( \"Desired source MAF type has not been specified.\" )\n\n#Create MAF writter\nout = bx.align.maf.Writer( open(output_file, \"w\") )\n\n#Iterate over input regions \nnum_blocks = 0\nnum_regions = None\nfor num_regions, region in enumerate( bx.intervals.io.NiceReaderWrapper( open( interval_file, 'r' ), chrom_col = chromCol, start_col = startCol, end_col = endCol, strand_col = strandCol, fix_strand = True, return_header = False, return_comments = False ) ):\n    src = maf_utilities.src_merge( dbkey, region.chrom )\n    for block in index.get_as_iterator( src, region.start, region.end ):\n        if split_blocks_by_species:\n            blocks = [ new_block for new_block in maf_utilities.iter_blocks_split_by_species( block ) if maf_utilities.component_overlaps_region( new_block.get_component_by_src_start( dbkey ), region ) ]\n        else:\n            blocks = [ block ]\n        for block in blocks:\n            block = maf_utilities.chop_block_by_region( block, src, region )\n            if block is not None:\n                if species is not None:\n                    block = block.limit_to_species( species )\n                block = maf_utilities.orient_block_by_region( block, src, region )\n                if remove_all_gap_columns:\n                    block.remove_all_gap_columns()\n                out.write( block )\n                num_blocks += 1\n\n#Close output MAF\nout.close()\n\n#remove index file if created during run\nmaf_utilities.remove_temp_index_file( index_filename )\n\nif num_blocks:\n    print \"%i MAF blocks extracted for %i regions.\" % ( num_blocks, ( num_regions + 1 ) )\nelif num_regions is not None:\n    print \"No MAF blocks could be extracted for %i regions.\" % ( num_regions + 1 )\nelse:\n    print \"No valid regions have been provided.\"\n</code></pre>\n<p>if <strong>name</strong> == \"<strong>main</strong>\": <strong>main</strong>()</p>\n<pre><code>tool_conf.xml section:\n</code></pre>\n<toolbox>\n  <section name=\"Workshop Demo\" id=\"workshop_demo\">\n    <tool file=\"demo/maf_slice.xml\" />\n  </section>\n</toolbox>\n```\n<p>End of Exercise, adding a basic tool:\n`<code></code>\n<tool id=\"maf_slice\" name=\"Slice MAF\" version=\"1.0.0\">\n<description>by intervals</description>\n<command interpreter=\"python\">\nmaf_slice.py --dbkey=hg17 --mafFile=${maf_input} --interval_file=${interval_input}  --output_file=${maf_output}\n</command>\n<inputs></p>\n<pre><code>&#x3C;param format=\"maf\" name=\"maf_input\" label=\"Choose alignments\" type=\"data\"/>\n&#x3C;param format=\"bed\" name=\"interval_input\" type=\"data\" label=\"Choose intervals\"/>\n</code></pre>\n   </inputs>\n   <outputs>\n     <data format=\"maf\" name=\"maf_output\"/>\n   </outputs>\n   <tests>\n   </tests>\n   <help>\n  </help>\n</tool>\n```\n<p>End of Exercise adding metadata elements to tool:\n`<code></code>\n<tool id=\"maf_slice\" name=\"Slice MAF\" version=\"1.0.1\">\n<description>by intervals</description>\n<command interpreter=\"python\">\nmaf_slice.py --dbkey=${interval_input.dbkey} --mafFile=${maf_input} --interval_file=${interval_input}  --output_file=${maf_output}\n--chromCol=${interval_input.metadata.chromCol} --startCol=${interval_input.metadata.startCol} --endCol=${interval_input.metadata.endCol} --strandCol=${interval_input.metadata.strandCol}\n--mafIndex=${maf_input.metadata.maf_index}\n</command>\n<inputs></p>\n<pre><code>&#x3C;param format=\"maf\" name=\"maf_input\" label=\"Choose alignments\" type=\"data\"/>\n&#x3C;param format=\"interval\" name=\"interval_input\" type=\"data\" label=\"Choose intervals\"/>\n</code></pre>\n   </inputs>\n   <outputs>\n     <data format=\"maf\" name=\"maf_output\"/>\n   </outputs>\n   <tests>\n   </tests>\n   <help>\n  </help>\n</tool>\n```\n<p>End of Exercise, adding conditional:\n`<code></code>\n<tool id=\"maf_slice\" name=\"Slice MAF\" version=\"1.0.2\">\n<description>by intervals</description>\n<command interpreter=\"python\">\nmaf_slice.py --dbkey=${interval_input.dbkey} --mafFile=${maf_source_type.maf_input} --interval_file=${interval_input}  --output_file=${maf_output}\n--chromCol=${interval_input.metadata.chromCol} --startCol=${interval_input.metadata.startCol} --endCol=${interval_input.metadata.endCol} --strandCol=${interval_input.metadata.strandCol}\n--mafIndex=${maf_source_type.maf_input.metadata.maf_index}\n</command>\n<inputs></p>\n<pre><code>&#x3C;param format=\"interval\" name=\"interval_input\" type=\"data\" label=\"Choose intervals\"/>\n&#x3C;conditional name=\"maf_source_type\">\n  &#x3C;param name=\"maf_source\" type=\"select\" label=\"MAF Source\">\n    &#x3C;option value=\"cached\" selected=\"true\">Locally Cached Alignments&#x3C;/option>\n    &#x3C;option value=\"user\">Alignments in Your History&#x3C;/option>\n  &#x3C;/param>\n  &#x3C;when value=\"user\">\n    &#x3C;param format=\"maf\" name=\"maf_input\" label=\"Choose alignments\" type=\"data\"/>\n  &#x3C;/when>\n  &#x3C;when value=\"cached\">\n    &#x3C;!-- need some way to access the external data -->\n  &#x3C;/when>\n&#x3C;/conditional>\n</code></pre>\n   </inputs>\n   <outputs>\n     <data format=\"maf\" name=\"maf_output\"/>\n   </outputs>\n   <tests>\n   </tests>\n   <help>\n  </help>\n</tool>\n```\n<p>End of Exercise, accessing .loc file:\n`<code></code>\n<tool id=\"maf_slice\" name=\"Slice MAF\" version=\"1.0.3\">\n<description>by intervals</description>\n<command interpreter=\"python\">\nmaf_slice.py --dbkey=${interval_input.dbkey} --interval_file=${interval_input}  --output_file=${maf_output}\n--chromCol=${interval_input.metadata.chromCol} --startCol=${interval_input.metadata.startCol} --endCol=${interval_input.metadata.endCol} --strandCol=${interval_input.metadata.strandCol}\n#if $maf_source_type.maf_source == \"user\":\n--mafFile=${maf_source_type.maf_input}\n--mafIndex=${maf_source_type.maf_input.metadata.maf_index}\n#else:\n--mafType=$maf_source_type.mafType\n--mafIndexFile=${GALAXY_DATA_INDEX_DIR}/maf_index.loc\n#end if\n</command>\n<inputs></p>\n<pre><code>&#x3C;param format=\"interval\" name=\"interval_input\" type=\"data\" label=\"Choose intervals\"/>\n&#x3C;conditional name=\"maf_source_type\">\n  &#x3C;param name=\"maf_source\" type=\"select\" label=\"MAF Source\">\n    &#x3C;option value=\"cached\" selected=\"true\">Locally Cached Alignments&#x3C;/option>\n    &#x3C;option value=\"user\">Alignments in Your History&#x3C;/option>\n  &#x3C;/param>\n  &#x3C;when value=\"user\">\n    &#x3C;param format=\"maf\" name=\"maf_input\" label=\"Choose alignments\" type=\"data\"/>\n  &#x3C;/when>\n  &#x3C;when value=\"cached\">\n    &#x3C;param name=\"mafType\" type=\"select\" label=\"Choose alignments\">\n      &#x3C;options from_data_table=\"indexed_maf_files\">\n        &#x3C;filter type=\"data_meta\" ref=\"interval_input\" key=\"dbkey\" column=\"dbkey\" multiple=\"True\" separator=\",\"/>\n        &#x3C;validator type=\"no_options\" message=\"No alignments are available for the build associated with the selected interval file\"/>\n      &#x3C;/options>\n    &#x3C;/param>\n  &#x3C;/when>\n&#x3C;/conditional>\n</code></pre>\n   </inputs>\n   <outputs>\n     <data format=\"maf\" name=\"maf_output\"/>\n   </outputs>\n   <tests>\n   </tests>\n   <help>\n  </help>\n</tool>\n```\n<p>End of Exercise, selecting species from metadata values for MAF in history:\n`<code></code>\n<tool id=\"maf_slice\" name=\"Slice MAF\" version=\"1.0.4\">\n<description>by intervals</description>\n<command interpreter=\"python\">\nmaf_slice.py --dbkey=${interval_input.dbkey} --interval_file=${interval_input}  --output_file=${maf_output}\n--chromCol=${interval_input.metadata.chromCol} --startCol=${interval_input.metadata.startCol} --endCol=${interval_input.metadata.endCol} --strandCol=${interval_input.metadata.strandCol}\n#if $maf_source_type.maf_source == \"user\":\n--mafFile=${maf_source_type.maf_input}\n--mafIndex=${maf_source_type.maf_input.metadata.maf_index}\n--species=${maf_source_type.species}\n#else:\n--mafType=$maf_source_type.mafType\n--mafIndexFile=${GALAXY_DATA_INDEX_DIR}/maf_index.loc\n#end if\n</command>\n<inputs></p>\n<pre><code>&#x3C;param format=\"interval\" name=\"interval_input\" type=\"data\" label=\"Choose intervals\"/>\n&#x3C;conditional name=\"maf_source_type\">\n  &#x3C;param name=\"maf_source\" type=\"select\" label=\"MAF Source\">\n    &#x3C;option value=\"cached\" selected=\"true\">Locally Cached Alignments&#x3C;/option>\n    &#x3C;option value=\"user\">Alignments in Your History&#x3C;/option>\n  &#x3C;/param>\n  &#x3C;when value=\"user\">\n    &#x3C;param format=\"maf\" name=\"maf_input\" label=\"Choose alignments\" type=\"data\"/>\n    &#x3C;param name=\"species\" type=\"select\" display=\"checkboxes\" multiple=\"true\" label=\"Choose species\" help=\"Select species to be included in the final alignment\">\n      &#x3C;options>\n        &#x3C;filter type=\"data_meta\" ref=\"maf_input\" key=\"species\" />\n      &#x3C;/options>\n    &#x3C;/param>\n  &#x3C;/when>\n  &#x3C;when value=\"cached\">\n    &#x3C;param name=\"mafType\" type=\"select\" label=\"Choose alignments\">\n      &#x3C;options from_data_table=\"indexed_maf_files\">\n        &#x3C;filter type=\"data_meta\" ref=\"interval_input\" key=\"dbkey\" column=\"dbkey\" multiple=\"True\" separator=\",\"/>\n        &#x3C;validator type=\"no_options\" message=\"No alignments are available for the build associated with the selected interval file\"/>\n      &#x3C;/options>\n    &#x3C;/param>\n  &#x3C;/when>\n&#x3C;/conditional>\n</code></pre>\n   </inputs>\n   <outputs>\n     <data format=\"maf\" name=\"maf_output\"/>\n   </outputs>\n   <tests>\n   </tests>\n   <help>\n  </help>\n</tool>\n```\n<p>End of exercise, selecting species available from .loc file:\n`<code></code>\n<tool id=\"maf_slice\" name=\"Slice MAF\" version=\"1.0.5\">\n<description>by intervals</description>\n<command interpreter=\"python\">\nmaf_slice.py --dbkey=${interval_input.dbkey} --interval_file=${interval_input}  --output_file=${maf_output}\n--chromCol=${interval_input.metadata.chromCol} --startCol=${interval_input.metadata.startCol} --endCol=${interval_input.metadata.endCol} --strandCol=${interval_input.metadata.strandCol}\n--species=${maf_source_type.species}\n#if $maf_source_type.maf_source == \"user\":\n--mafFile=${maf_source_type.maf_input}\n--mafIndex=${maf_source_type.maf_input.metadata.maf_index}\n#else:\n--mafType=$maf_source_type.mafType\n--mafIndexFile=${GALAXY_DATA_INDEX_DIR}/maf_index.loc\n#end if\n</command>\n<inputs></p>\n<pre><code>&#x3C;param format=\"interval\" name=\"interval_input\" type=\"data\" label=\"Choose intervals\"/>\n&#x3C;conditional name=\"maf_source_type\">\n  &#x3C;param name=\"maf_source\" type=\"select\" label=\"MAF Source\">\n    &#x3C;option value=\"cached\" selected=\"true\">Locally Cached Alignments&#x3C;/option>\n    &#x3C;option value=\"user\">Alignments in Your History&#x3C;/option>\n  &#x3C;/param>\n  &#x3C;when value=\"user\">\n    &#x3C;param format=\"maf\" name=\"maf_input\" label=\"Choose alignments\" type=\"data\"/>\n    &#x3C;param name=\"species\" type=\"select\" display=\"checkboxes\" multiple=\"true\" label=\"Choose species\" help=\"Select species to be included in the final alignment\">\n      &#x3C;options>\n        &#x3C;filter type=\"data_meta\" ref=\"maf_input\" key=\"species\" />\n      &#x3C;/options>\n    &#x3C;/param>\n  &#x3C;/when>\n  &#x3C;when value=\"cached\">\n    &#x3C;param name=\"mafType\" type=\"select\" label=\"Choose alignments\">\n      &#x3C;options from_data_table=\"indexed_maf_files\">\n        &#x3C;filter type=\"data_meta\" ref=\"interval_input\" key=\"dbkey\" column=\"dbkey\" multiple=\"True\" separator=\",\"/>\n        &#x3C;validator type=\"no_options\" message=\"No alignments are available for the build associated with the selected interval file\"/>\n      &#x3C;/options>\n    &#x3C;/param>\n    &#x3C;param name=\"species\" type=\"select\" display=\"checkboxes\" multiple=\"true\" label=\"Choose species\" help=\"Select species to be included in the final alignment\">\n      &#x3C;options from_data_table=\"indexed_maf_files\">\n        &#x3C;column name=\"uid\" index=\"1\"/>\n        &#x3C;column name=\"value\" index=\"3\"/>\n        &#x3C;column name=\"name\" index=\"3\"/>\n        &#x3C;filter type=\"param_value\" ref=\"mafType\" column=\"uid\"/>\n        &#x3C;filter type=\"multiple_splitter\" column=\"name\" separator=\",\"/>\n      &#x3C;/options>\n    &#x3C;/param>\n  &#x3C;/when>\n&#x3C;/conditional>\n</code></pre>\n   </inputs>\n   <outputs>\n     <data format=\"maf\" name=\"maf_output\"/>\n   </outputs>\n   <tests>\n   </tests>\n   <help>\n  </help>\n</tool>\n```\n"}},"context":{}}