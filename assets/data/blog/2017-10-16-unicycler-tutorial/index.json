{"hash":"c32ecfdb33b075b0057598b5b9118f3554a398cf","data":{"article":{"id":"e8c23d80d8ed27fb55d968037b87c862","title":"Small genome assembly in Galaxy","tease":"Why not to do assembly on-line?","image":"/src/blog/2017-10-16-UnicyclerTutorial/unicycler.png","images":{},"category":"blog","contact":"","date":"16 October 2017","content":"<div class=\"alert alert-info\" role=\"alert\"><i class=\"fa fa-fighter-jet\" aria-hidden=\"true\"></i> If you are impatient (like me) and would like to try assembly right away - go to [tutorial](https://galaxyproject.github.io/training-material/topics/assembly/tutorials/unicycler-assembly/tutorial.html). </div>\n<p>Perhaps assembly is spelled <strong>ass</strong>embly for a reason - it is complicated. When I first needed to perform assembly I was uneasy about it - I had never done it before. What I needed was to sequence a genome of an <em>E. coli</em> type C-1 that my lab was using in experimental evolution experiments (e.g., Dickins:<a href=\"https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2817424/\" target=\"_blank\" rel=\"noopener noreferrer\">2009</a>). We had generated data and were sitting figuring out what to do with it. Here I describe our logic and how we ended up with integrating genome assembly into Galaxy, so <em>you</em> can use your time more wisely. </p>\n<h2 id=\"getting-data\"><a href=\"#getting-data\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Getting data</h2>\n<p>We have sequenced the genome using two technologies: Illumina MiSeq (250 nucleotide paired reads) and Oxford Nanopore. For MiSeq we used <a href=\"https://www.huck.psu.edu/content/instrumentation-facilities/genomics-core-facility\" target=\"_blank\" rel=\"noopener noreferrer\">Penn State core facility</a> while Oxford Nanopore Sequencing was performed in <a href=\"http://taylorlab.org\" target=\"_blank\" rel=\"noopener noreferrer\">James Taylor's lab</a> who just could not resist and bought the <a href=\"https://nanoporetech.com/products/minion\" target=\"_blank\" rel=\"noopener noreferrer\">MinIon</a> device. Of course devices don't simply sequence the DNA. Libraries need to be prepared, QCed, and sequenced. Both myself and James are lucky to have excellent people in the lab. For MiSeq run all experimental work was performed by <a href=\"http://bmb.psu.edu/directory/hzm5191\" target=\"_blank\" rel=\"noopener noreferrer\">Han Mei</a>, a graduate student at Penn State. For Oxford Nanopore run everything was done by <a href=\"https://twitter.com/malloryfreeberg?lang=en\" target=\"_blank\" rel=\"noopener noreferrer\">Mallory Freeberg</a> (currently a bioinformatician at EMBL-EBI). As you can see below the data were spectacular:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"/src/blog/2017-10-16-UnicyclerTutorial/miseq_qc.png\"></td>\n</tr>\n<tr>\n<td><small><strong>Figure 1.</strong> Quality score distribution for MiSeq reads.</small></td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"/src/blog/2017-10-16-UnicyclerTutorial/ont_length.png\"></td>\n</tr>\n<tr>\n<td><small><strong>Figure 2.</strong> Read length distribution for Oxford Nanopore reads. The longest read was 27,519 nucleotides long.</small></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"trying-assembly\"><a href=\"#trying-assembly\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Trying assembly</h2>\n<p>After reading and consulting with people who actually understand genome assembly process (notably <a href=\"http://medvedevgroup.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Paul Medvedev</a>) we chose <a href=\"http://bioinf.spbau.ru/spades\" target=\"_blank\" rel=\"noopener noreferrer\">SPAdes</a> for performing the assembly. SPAdes supports <a href=\"https://www.ncbi.nlm.nih.gov/pubmed/26589280\" target=\"_blank\" rel=\"noopener noreferrer\">hybrid assembly</a> where short high quality reads (Illumina in our case) are supplemented by long, relatively inaccurate reads (Oxford Nanopore that we've generated).</p>\n<h3 id=\"running-spades\"><a href=\"#running-spades\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Running SPAdes</h3>\n<p>We installed Spades 3.11.1 using <a href=\"https://bioconda.github.io/recipes/spades/README.html\" target=\"_blank\" rel=\"noopener noreferrer\">Bioconda</a> and generated assembly using the following command:</p>\n<pre><code>spades.py -k 21,33,55,77,99,127 -1 forward_miseq_reads.fastq -2 reverse_miseq_reads.fastq --nanopore nanopore_reads.fastq  -t 20 -o assembly    \n</code></pre>\n<p>It produced the following assembly (for distinction between contigs and scaffolds <a href=\"https://support.ncbi.nlm.nih.gov/link/portal/28045/28049/Article/752/How-are-genome-assemblies-generated-and-what-are-assembly-levels\" target=\"_blank\" rel=\"noopener noreferrer\">see here</a>):</p>\n<table>\n<thead>\n<tr>\n<th>Statistics</th>\n<th>Contigs</th>\n<th>Scaffolds</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td># contigs/scaffolds > 0 bp</td>\n<td>2,271</td>\n<td>2,253</td>\n</tr>\n<tr>\n<td># contigs/scaffolds ⋝ 1,000 bp</td>\n<td>22</td>\n<td>33</td>\n</tr>\n<tr>\n<td>Total length > 0 bp</td>\n<td>5,676,639</td>\n<td>5,679,836</td>\n</tr>\n<tr>\n<td>Total length ⋝ 1000 bp</td>\n<td>4,611,915</td>\n<td>4,629,934</td>\n</tr>\n<tr>\n<td>Largest contig/scaffold</td>\n<td>4,135,925</td>\n<td>4,575,240</td>\n</tr>\n<tr>\n<td>GC (%)</td>\n<td>50.91</td>\n<td>50.91</td>\n</tr>\n<tr>\n<td>N50</td>\n<td>4,135,925</td>\n<td>4,575,240</td>\n</tr>\n<tr>\n<td>N75</td>\n<td>4,135,925</td>\n<td>4,575,240</td>\n</tr>\n<tr>\n<td># of Ns per 100 kbp</td>\n<td>0.0</td>\n<td>22.07</td>\n</tr>\n</tbody>\n</table>\n<p>Here you can see that the largest scaffold is 4,575,240 bp which is very close to a complete <em>E. coli</em> genome (<em>E. coli</em> <a href=\"https://www.ncbi.nlm.nih.gov/nuccore/NC_000913.3\" target=\"_blank\" rel=\"noopener noreferrer\">K-12's genome</a> is 4,641,652 bp). But what about these extra 2,253 scaffolds? Looking at assembly graph generated with SPAdes using <a href=\"http://rrwick.github.io/Bandage/\" target=\"_blank\" rel=\"noopener noreferrer\">Bandage</a> produces this image:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"/src/blog/2017-10-16-UnicyclerTutorial/spades_graph.png\"></td>\n</tr>\n<tr>\n<td><small><strong>Figure 3.</strong> SPAdes assembly graph. Repeat resolution and scaffolding along this graph produces contigs and scaffolds produced by SPAdes. This is why sequences reported by assembler are longer that nodes shown in this graph.</small></td>\n</tr>\n</tbody>\n</table>\n<p>At the bottom of this graph there is a very large number of subgraphs disconnected from the main graph. It was not clear to me what to do with them and what is their significance. </p>\n<h3 id=\"unicycler-to-the-rescue\"><a href=\"#unicycler-to-the-rescue\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Unicycler to the rescue</h3>\n<p><img src=\"/src/blog/2017-10-16-UnicyclerTutorial/unicycler_logo.png\"></p>\n<p><a href=\"https://github.com/rrwick\" target=\"_blank\" rel=\"noopener noreferrer\">Ryan Wick</a>, the author of Bandage used above, has written a tool, <a href=\"https://github.com/rrwick/Unicycler\" target=\"_blank\" rel=\"noopener noreferrer\">Unicycler</a>, that is designed to produce a much more palatable assembly. Unicycler uses SPAdes to produce an assembly graph, which is then bridged (simplified) using long reads to produce longest possible set of contigs. These are then polished by aligning original short reads against produced contigs and feeding these alignment to <a href=\"https://github.com/broadinstitute/pilon/wiki\" target=\"_blank\" rel=\"noopener noreferrer\">Pilon</a> - an assembly improvement tool.</p>\n<p>Applying Unicycler to the same data produces just two (instead of 2,271!) contigs:</p>\n<table>\n<thead>\n<tr>\n<th>Statistics</th>\n<th>Contigs</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td># contigs/scaffolds > 0 bp</td>\n<td>2</td>\n</tr>\n<tr>\n<td># contigs/scaffolds ⋝ 1,000 bp</td>\n<td>2</td>\n</tr>\n<tr>\n<td>Total length > 0 bp</td>\n<td>4,581,676</td>\n</tr>\n<tr>\n<td>Total length ⋝ 1000 bp</td>\n<td>4,581,676</td>\n</tr>\n<tr>\n<td>Largest contig</td>\n<td>4,576,290</td>\n</tr>\n<tr>\n<td>GC (%)</td>\n<td>50.93</td>\n</tr>\n<tr>\n<td>N50</td>\n<td>4,576,290</td>\n</tr>\n<tr>\n<td>N75</td>\n<td>4,576,290</td>\n</tr>\n<tr>\n<td># of Ns per 100 kbp</td>\n<td>0.0</td>\n</tr>\n</tbody>\n</table>\n<p>and the final assembly graph that looks like this:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"/src/blog/2017-10-16-UnicyclerTutorial/unicycler_graph.png\"></td>\n</tr>\n<tr>\n<td><small><strong>Figure 4.</strong> Unicycler final assembly graph.</small></td>\n</tr>\n</tbody>\n</table>\n<p>The second short contig is simply the complete genome of bacteriophage ɸX174, which is added as spike-in in Illumina sequencing protocol. </p>\n<p>So after doing all of this the obvious question is why not to enable assembly is Galaxy?</p>\n<h2 id=\"assembly-on-the-web\"><a href=\"#assembly-on-the-web\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Assembly on the web</h2>\n<p>Unicycler has proven to be a great tool. So with help of <a href=\"https://github.com/bgruening\" target=\"_blank\" rel=\"noopener noreferrer\">Björn Grüning</a>, <a href=\"https://github.com/Delphine-L\" target=\"_blank\" rel=\"noopener noreferrer\">Delphine Lariviere</a>, and <a href=\"https://github.com/davebx\" target=\"_blank\" rel=\"noopener noreferrer\">Dave Bouvier</a> we <a href=\"https://bioconda.github.io/recipes/unicycler/README.html\" target=\"_blank\" rel=\"noopener noreferrer\">added it to Bioconda</a> and <a href=\"https://github.com/galaxyproject/tools-iuc/tree/master/tools/unicycler\" target=\"_blank\" rel=\"noopener noreferrer\">wrapped</a> it for <a href=\"http://usegalaxy.org\" target=\"_blank\" rel=\"noopener noreferrer\">Galaxy</a>, so anyone can repeat this entire analysis on-line without installing and configuring anything.</p>\n<div class=\"float-right\">\n![Bridges](/src/blog/2017-10-16-UnicyclerTutorial/bridges.jpg)\n</div> \n<p>By allowing assembly tools in Galaxy we are also allowing multiple users to perform assembly simultaneously. This requires substantial computational resources. Execution of Unicycler on Galaxy <a href=\"http://usegalaxy.org\" target=\"_blank\" rel=\"noopener noreferrer\">main instance</a> actually takes place on <a href=\"https://www.psc.edu/bridges\" target=\"_blank\" rel=\"noopener noreferrer\">Bridges supercomputer</a> at the Pittsburgh Supercomputing Center. This resource allocation is provided by a grant from the <a href=\"https://www.xsede.org/\" target=\"_blank\" rel=\"noopener noreferrer\">XSEDE</a> consortium for which we are extremely grateful.</p>\n<p>The Unicycler interface in Galaxy looks like this:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"/src/blog/2017-10-16-UnicyclerTutorial/unicycler_galaxy.png\"></td>\n</tr>\n<tr>\n<td><small><strong>Figure 5.</strong> Unicycler interface in Galaxy.</small></td>\n</tr>\n</tbody>\n</table>\n<div class=\"float-right\">\n![Bridges](/src/blog/2017-10-16-UnicyclerTutorial/prokka.jpg)\n</div> \n<p>But it's not just Unicycler, we've also integrated <a href=\"http://bioinf.spbau.ru/quast\" target=\"_blank\" rel=\"noopener noreferrer\">Quast</a> to evaluate assembly quality and <a href=\"http://www.vicbioinformatics.com/software.prokka.shtml\" target=\"_blank\" rel=\"noopener noreferrer\">Prokka</a> to produce annotations. So you can start with sequencing reads and end up with full-fledged annotated genome:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"/src/blog/2017-10-16-UnicyclerTutorial/prokka_annotation.png\"></td>\n</tr>\n<tr>\n<td><small><strong>Figure 6.</strong> Assembled and annotated genome of <em>E. coli</em> C-1.</small></td>\n</tr>\n</tbody>\n</table>\n<p>So ...</p>\n<p><a href=\"https://galaxyproject.github.io/training-material/topics/assembly/tutorials/unicycler-assembly/tutorial.html\"><button type=\"button\" class=\"btn btn-success\">Go to Unicycler tutorial Now!</button></a></p>\n"}},"context":{}}