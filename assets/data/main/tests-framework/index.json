{"hash":"413b95c96e3c2a1187afbfe2a34414202ea5b44f","data":{"article":{"id":"8a8d3fa5fb5796aab3b7e426bdb834ed","title":"","tease":"","category":null,"date":null,"days":null,"contact":"","contact_url":"","authors":"","location":"","location_url":"","source_blog":"","source_blog_url":"","skip_title_render":null,"links":[],"image":"","images":{},"external_url":"","content":"<div class=\"toc-wrapper col-md-3\">\n<ul>\n<li>\n<ul>\n<li><a href=\"#galaxy-test-frame-work-documentation\">Galaxy test frame work documentation</a></li>\n</ul>\n</li>\n<li><a href=\"#setup-a-galaxy-instance\">setup a galaxy instance</a></li>\n<li><a href=\"#setup-toolbox-test_toolboxpy-is-required-to-be-in-the-same-directory\">setup toolbox (test_toolbox.py is required to be in the same directory)</a></li>\n</ul>\n</div>\n<div class=\"body-wrapper col-md-9\">\n<h2 id=\"galaxy-test-frame-work-documentation\"><a href=\"#galaxy-test-frame-work-documentation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Galaxy test frame work documentation</h2>\n<p><strong>Steps of galaxy testing</strong></p>\n<ol>\n<li><code>run_tests.sh</code> --></li>\n<li><code>nosetests.sh</code> --></li>\n<li><code>nosetests.py</code> --></li>\n<li><code>test/funcational/__init__.py</code> --></li>\n<li>test on tool_id, test files or directories</li>\n</ol>\n<p><strong>Details:</strong>\n** 1. <code>run_tests.sh</code>:**</p>\n<ul>\n<li>'<code>run_tests.sh help</code>' for help</li>\n<li>'<code>run_tests.sh</code>'\t\tfor testing all the tools in functional directory</li>\n<li>'<code>run_tests.sh aaa</code>'\t\tfor testing one test case, 'aaa'</li>\n<li>'<code>run_tests.sh -id bbb</code>'\tfor testing one tool with id 'bbb'</li>\n<li>'<code>run_tests.sh -list</code>'\t\tfor listing all the tool ids</li>\n</ul>\n<p>Note that this script was originally called run_functional_tests.sh (which currently exists as an alias for back-compatibility).</p>\n<p><strong>2.<code>nosetests.sh</code>:</strong> wrapper of <code>nosetests.py</code></p>\n<p><strong>3.<code>nosetests.py</code></strong></p>\n<pre><code>nosetests.py ~[~[options]|[(optional) test files or directories]]\noptions: see appendix I, “Nose options”\n(optional) test files or directories: relative or absolute path to the files or directories\n</code></pre>\n<p><strong>4.<code>test/functional/__init__.py</code></strong></p>\n<h1 id=\"setup-a-galaxy-instance\"><a href=\"#setup-a-galaxy-instance\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>setup a galaxy instance</h1>\n<h1 id=\"setup-toolbox-test_toolboxpy-is-required-to-be-in-the-same-directory\"><a href=\"#setup-toolbox-test_toolboxpy-is-required-to-be-in-the-same-directory\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>setup toolbox (test_toolbox.py is required to be in the same directory)</h1>\n<p><strong>5.test on tool_id, test files or directories</strong></p>\n<ol>\n<li>tool_id: you can just input the tool_id to test a single galaxy tool. Please follow the following steps.</li>\n</ol>\n<ul>\n<li>“<code>run_tests.sh -list</code>” : this command will list all the tool_ids, then you can select the correct tool_id of a tool.</li>\n<li>“<code>run_tests.sh -id tool_id</code>”: this command will test the single of this tool_id.</li>\n</ul>\n<ol>\n<li>test_files: if you want to test a file or files, just simply input the command as:</li>\n</ol>\n<ul>\n<li>\"<code>run_tests.sh test/functional/test_get_data.py</code>\"</li>\n</ul>\n<ol>\n<li>directories: if you want to test all the test in a directory(s), just simply input the command as:</li>\n</ol>\n<ul>\n<li>\"<code>run_tests.sh test/functional</code>\"</li>\n</ul>\n<p>Appendix I : Nose options</p>\n<p>Nose: a discovery-based unittest extension. nose provides an alternate test discovery and running process for unittest, one that is intended to mimic the behavior of py.test as much as is reasonably possible without resorting to too much magic.</p>\n<pre><code>options:\n  -h, --help            show this help message and exit\n  -V, --version         Output nose version and exit\n  -p, --plugins         Output list of available plugins and exit. Combine\n                        with higher verbosity for greater detail\n  -v, --verbose         Be more verbose. [NOSE_VERBOSE]\n  --verbosity=VERBOSITY\n                        Set verbosity; --verbosity=2 is the same as -v\n  -q, --quiet           \n  -c FILES, --config=FILES\n                        Load configuration from config file(s). May be\n                        specified multiple times; in that case, all config\n                        files will be loaded and combined\n  -w WHERE, --where=WHERE\n                        Look for tests in this directory. May be specified\n                        multiple times. The first directory passed will be\n                        used as the working directory, in place of the current\n                        working directory, which is the default. Others will\n                        be added to the list of tests to execute. [NOSE_WHERE]\n  -m TESTMATCH, --match=TESTMATCH, --testmatch=TESTMATCH\n                        Use this regular expression to find tests\n                        [NOSE_TESTMATCH]\n  --tests=TESTNAMES Run these tests (comma-separated list). This argument\n                        is useful mainly from configuration files; on the\n                        command line, just pass the tests to run as additional\n                        arguments with no switch.\n  -l DEBUG, --debug=DEBUG\n                        Activate debug logging for one or more systems.\n                        Available debug loggers: nose, nose.importer,\n                        nose.inspector, nose.plugins, nose.result and\n                        nose.selector. Separate multiple names with a comma.\n  --debug-log=DEBUGLOG Log debug messages to this file (default: sys.stderr)\n  --logging-config=LOGGINGCONFIG, --log-config=LOGGINGCONFIG\n                        Load logging config from this file -- bypasses all\n                        other logging config settings.\n  -e EXCLUDE, --exclude=EXCLUDE\n                        Don't run tests that match regular expression\n                        [NOSE_EXCLUDE]\n  -i INCLUDE, --include=INCLUDE\n                        Also run tests that match regular expression\n                        [NOSE_INCLUDE]\n  -x, --stop            Stop running tests after the first error or failure\n  -P, --no-path-adjustment\n                        Don't make any changes to sys.path when loading tests\n                        [NOSE_NOPATH]\n  --exe                 Look for tests in python modules that are executable.\n                        Normal behavior is to exclude executable modules,\n                        since they may not be import-safe [NOSE_INCLUDE_EXE]\n  --noexe               DO NOT look for tests in python modules that are\n                        executable. (The default on the windows platform is to\n                        do so.)\n  -a ATTR, --attr=ATTR Run only tests that have attributes specified by ATTR\n                        [NOSE_ATTR]\n  -A EXPR, --eval-attr=EXPR\n                        Run only tests for whose attributes the Python\n                        expression EXPR evaluates to True [NOSE_EVAL_ATTR]\n  -s, --nocapture       Don't capture stdout (any stdout output will be\n                        printed immediately) [NOSE_NOCAPTURE]\n  --with-coverage       Enable plugin Coverage:  If you have Ned Batchelder's\n                        coverage module installed, you may activate a coverage\n                        report. The coverage report will cover any python\n                        source module imported after the start of the test\n                        run, excluding modules that match testMatch. If you\n                        want to include those modules too, use the --cover-\n                        tests switch, or set the NOSE_COVER_TESTS environment\n                        variable to a true value. To restrict the coverage\n                        report to modules from a particular package or\n                        packages, use the --cover-packages switch or the\nNOSE_COVER_PACKAGES environment variable.\n                        [NOSE_WITH_COVERAGE]\n  --cover-package=COVER_PACKAGES\n                        Restrict coverage output to selected packages\n                        [NOSE_COVER_PACKAGE]\n  --cover-erase         Erase previously collected coverage statistics before\n                        run\n  --cover-tests         Include test modules in coverage report\n                        [NOSE_COVER_TESTS]\n  --cover-inclusive     Include all python files under working directory in\n                        coverage report.  Useful for discovering holes in test\n                        coverage if not all files are imported by the test\n                        suite. [NOSE_COVER_INCLUSIVE]\n  --pdb                 Drop into debugger on errors\n  --pdb-failures        Drop into debugger on failures\n  --no-deprecated       Disable special handling of DeprecatedTest exceptions.\n  --with-doctest        Enable plugin Doctest:  Activate doctest plugin to\n                        find and run doctests in non-test modules.\n                        [NOSE_WITH_DOCTEST]\n  --doctest-tests       Also look for doctests in test modules\n                        [NOSE_DOCTEST_TESTS]\n  --doctest-extension=DOCTESTEXTENSION\n                        Also look for doctests in files with this extension\n                        [NOSE_DOCTEST_EXTENSION]\n  --with-isolation      Enable plugin IsolationPlugin:  Activate the isolation\n                        plugin to isolate changes to external modules to a\n                        single test module or package. The isolation plugin\n                        resets the contents of sys.modules after each test\n                        module or package runs to its state before the test.\nPLEASE NOTE that this plugin should not be used with\n                        the coverage plugin in any other case where module\n                        reloading may produce undesirable side-effects.\n                        [NOSE_WITH_ISOLATION]\n  -d, --detailed-errors, --failure-detail\n                        Add detail to error output by attempting to evaluate\n                        failed asserts [NOSE_DETAILED_ERRORS]\n  --with-profile        Enable plugin Profile:  Use this plugin to run tests\n                        using the hotshot profiler.   [NOSE_WITH_PROFILE]\n  --profile-sort=PROFILE_SORT\n                        Set sort order for profiler output\n  --profile-stats-file=PROFILE_STATS_FILE\n                        Profiler stats file; default is a new temp file on\n                        each run\n  --profile-restrict=PROFILE_RESTRICT\n                        Restrict profiler output. See help for pstats.Stats\n                        for details\n  --no-skip             Disable special handling of SkipTest exceptions.\n  --with-id             Enable plugin TestId:  Activate to add a test id (like\n                        #1) to each test name output. After you've run once to\n                        generate test ids, you can re-run individual tests by\n                        activating the plugin and passing the ids (with or\n                        without the # prefix) instead of test names.\n                        [NOSE_WITH_ID]\n  --id-file=TESTIDFILE Store test ids found in test runs in this file.\n</code></pre>\n</div>\n"}},"context":{}}