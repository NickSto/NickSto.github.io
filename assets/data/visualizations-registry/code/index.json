{"hash":"413b95c96e3c2a1187afbfe2a34414202ea5b44f","data":{"article":{"id":"fb00e18f0c8851f24e3831e36bbcf0c5","title":"","tease":"","category":null,"date":null,"days":null,"contact":"","contact_url":"","authors":"","location":"","location_url":"","source_blog":"","source_blog_url":"","skip_title_render":null,"links":[],"image":"","images":{},"external_url":"","content":"<div class=\"toc-wrapper col-md-3\">\n<ul>\n<li>\n<p><a href=\"#creating-a-mako-template-file-for-your-visualization\">Creating a mako template file for your visualization</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"#a-design-goal\">A Design Goal</a></li>\n<li><a href=\"#resources\">Resources</a></li>\n<li><a href=\"#the-config-variable\">The config variable</a></li>\n<li><a href=\"#saved-visualizations\">Saved visualizations</a></li>\n<li><a href=\"#common-templates-and-template-namespaces\">Common templates and template namespaces</a></li>\n<li><a href=\"#other-things-available-to-your-template-code\">Other things available to your template code</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#data-the-datasets-api-and-dataproviders\">Data: the Datasets API and DataProviders</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"#the-api\">The API</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#troubleshooting\">Troubleshooting</a></li>\n</ul>\n</div>\n<div class=\"body-wrapper col-md-9\">\n<h2 id=\"creating-a-mako-template-file-for-your-visualization\"><a href=\"#creating-a-mako-template-file-for-your-visualization\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Creating a mako template file for your visualization</h2>\n<p>Besides creating a registry entry in the XML file, the bulk of your code will be in your visualization template.</p>\n<p><code>template</code> is a required sub-element of the visualization XML element and the text node should be the <em>basename</em>\nof your visualization template file. The registry will normally look for that file in the <code>templates</code> directory of\nyour plugin's base directory.</p>\n<p>You can override the directory it looks for these by using the sub-element <code>template_root</code> which\nshould be a filesystem path stemming off of <code>templates/webapps/galaxy</code>.\n*/</p>\n<p>Currently, you are not required to inherit your template from any other template (such as <code>base.mako</code>), but this may\nchange in the future.</p>\n<h4 id=\"a-design-goal\"><a href=\"#a-design-goal\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>A Design Goal</h4>\n<p>The design goal of this part of the framework is to provide options and get out of your way. Your template will be\nprovided the data you specified from a link you planned, now the choice of rendering technologies, UI/interactivity,\nand procdures or algorithms is up to you. In other words, <strong>the goal is not to have the framework do your visualization\nprogramming for you but to have it do your Galaxy programming for you</strong>. (Although we will provide components to\nmake many things as easy as possible.)</p>\n<p>Since the template system Galaxy currently uses is the Mako template system, the first possible jumping off point is\npython. Your template could use any number of technologies through python:</p>\n<ul>\n<li><a href=\"http://matplotlib.org\" target=\"_blank\" rel=\"noopener noreferrer\">matplotlib</a></li>\n<li><a href=\"http://gnuplot.info\" target=\"_blank\" rel=\"noopener noreferrer\">gnuplot</a></li>\n<li><a href=\"http://r-project.org\" target=\"_blank\" rel=\"noopener noreferrer\">R</a> and <a href=\"http://rpy.sourceforge.net/rpy2.html\" target=\"_blank\" rel=\"noopener noreferrer\">RPy2</a></li>\n<li><a href=\"http://code.google.com/p/svgfig\" target=\"_blank\" rel=\"noopener noreferrer\">svgfig</a> (which already comes bundled with all Galaxy installations)</li>\n</ul>\n<p>(Note: that the packages and modules required for each of these systems must be already be available to your Galaxy\ninstance as a whole; you won't be able to pull them in <em>just</em> for your visualization.)</p>\n<p>Mako specializes in creating markup of any type readable by modern browsers - so you can also leverage it by itself to\ncreate:</p>\n<ul>\n<li>HTML</li>\n<li>SVG</li>\n<li>MathML</li>\n<li><a href=\"http://en.wikipedia.org/wiki/Data_URI_scheme\" target=\"_blank\" rel=\"noopener noreferrer\">Data URIs</a></li>\n</ul>\n<p>Addtionally, since the product of the mako template is a web page, JavaScript and client side code is also a good option:</p>\n<ul>\n<li>SVG with <a href=\"http://d3js.org\" target=\"_blank\" rel=\"noopener noreferrer\">d3js</a>, <a href=\"http://raphaeljs.com\" target=\"_blank\" rel=\"noopener noreferrer\">raphaeljs</a>, or any others</li>\n<li>the HTML5 canvas with <a href=\"http://paperjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">paperjs</a>, <a href=\"http://chartjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">chartjs</a>,\n<a href=\"http://processingjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">processingjs</a> or any others</li>\n<li>WebGL with <a href=\"http://senchalabs.org/philogl\" target=\"_blank\" rel=\"noopener noreferrer\">philogl</a>, <a href=\"http://github.com/xtk/X\" target=\"_blank\" rel=\"noopener noreferrer\">X</a>, or others</li>\n</ul>\n<p>Interactivity can be used via python or JavaScript as well:</p>\n<ul>\n<li>Control the page via python and in-page links, forms, and the traditional GET/POST HTTP cycle</li>\n<li>Control the page via JavaScript with any number of JS libraries, widgets, and events</li>\n</ul>\n<h4 id=\"resources\"><a href=\"#resources\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Resources</h4>\n<h4 id=\"the-config-variable\"><a href=\"#the-config-variable\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>The config variable</h4>\n<h4 id=\"saved-visualizations\"><a href=\"#saved-visualizations\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Saved visualizations</h4>\n<h4 id=\"common-templates-and-template-namespaces\"><a href=\"#common-templates-and-template-namespaces\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Common templates and template namespaces</h4>\n<h4 id=\"other-things-available-to-your-template-code\"><a href=\"#other-things-available-to-your-template-code\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Other things available to your template code</h4>\n<ul>\n<li><code>trans</code> : the entire <code>GalaxyWebTransaction</code>, <code>trans</code> is available</li>\n<li><code>h</code> : the Galaxy template helper functions (<code>lib/galaxy/web/framework/helpers/__init__.py</code>)</li>\n<li><code>visualization_name</code> : the name of the plugin (e.g. for plugins/visualizations/myvis it would be 'myvis')</li>\n<li><code>visualization_display_name</code> : the display name of the plugin, defined in the visualization element's <code>name</code>\nattribute in the configuration file (e.g. 'My Visualization')</li>\n<li><code>title</code> : any title passed in from a saved visualization or in the query string</li>\n<li><code>visualization_id</code> : the encoded id of the saved visualization used or <code>None</code> if this is a new visualization</li>\n<li><code>query</code> : these are the raw, unparsed query string arguments (as opposed to the context-scoped resources). If you need\na variable that from the query string, access this dictionary.</li>\n<li><code>vars</code> : Mako has no global variables even in the page scope, as a workaround the Mako developers recommend\npassing an empty dictionary into the context scope of the template. You can add new entries to shared_vars and then\naccess them in separate, <code>&#x3C;%def%></code>ined functions.</li>\n<li><code>embedded</code> : this is passed to all templates with a default value of None. In the future, this parameter may contain\na CSV value string containing information (dimensions, configurion allowed, etc.) on how a visualization is being\nembedded into another web page.</li>\n</ul>\n<hr>\n<h2 id=\"data-the-datasets-api-and-dataproviders\"><a href=\"#data-the-datasets-api-and-dataproviders\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Data: the Datasets API and DataProviders</h2>\n<p>The primary purpose of Galaxy visualizations is the visual analysis of the data inside the files of our Galaxy datasets.\nThe datasets API and DataProviders allow you to efficiently query whole files or parts of files (sequentially or by\nsearching).</p>\n<p>There are two ways you might do this in your template: bootstrapping the data into python structures when the template\nis rendered and calling the datasets API via JavaScript to load JavaScript structures asynchronously.</p>\n<p>A simple use case might be to load data from an HDA's interval file in map format/structure. The entry point for\nbootstrapping this data is the dataset datatype's dataproviders.</p>\n<p>You could bootstrap into python, getting the data directly from the <code>datatype.dataprovider</code> (keep in mind a\ndataprovider is a python generator):</p>\n<pre><code class=\"language-python\">bootstrapped_interval_list = list( dataset.datatype.dataprovider( dataset, 'interval-map' ) )\n# do something with the data\n</code></pre>\n<p>Alternately you could bootstrap into javascript with the helper (<code>h</code>) method <code>to_json_string</code>:</p>\n<pre><code class=\"language-javascript\">    var interval_list = ${h.to_json_string( list( dataset.datatype.dataprovider( dataset, 'interval-map' ) ) )};\n    // do something with the data\n</code></pre>\n<p>The entry point for getting the data through the API (or even loading <em>more</em> data after you've bootstrapped some) is\nthrough the datasets api and a library that can do AJAX requests (such as jQuery):</p>\n<pre><code class=\"language-javascript\">    var encodedId = '${query_args[ 'dataset_id' ]}';\n    var ajaxReq = jQuery.ajax( '/api/datasets/' + encodedId, {\n        data : {\n            // this argument tells the datasets API to return file contents instead of data about the dataset itself\n            data_type: 'raw_data',\n            // name the provider\n            provider : 'interval-map'\n        }\n    });\n    ajaxReq.then( function( intervalList ){\n        // do something with the data\n    });\n</code></pre>\n<h4 id=\"the-api\"><a href=\"#the-api\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>The API</h4>\n<p>More supporting infrastructure is available to you through the API. Here you can add client code for interactivity\nincluding:</p>\n<ul>\n<li>Loading already configured or saved visualizations</li>\n<li>Saving the current state of a user's visualization through the visualizations API</li>\n<li>Running tools and workflows from your visualization with the tools and workflows API</li>\n</ul>\n<hr>\n<h2 id=\"troubleshooting\"><a href=\"#troubleshooting\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Troubleshooting</h2>\n<p>If you're successfully calling your visualization's page and (from the javascript console) you're seeing <strong>404s when\nthe page attempts to load static resources</strong>. It may be that your server is using a proxy server that needs a rewrite\nrule to find the static content. For example, with nginx:</p>\n<pre><code class=\"language-nginx\">    location ~ ^/plugins/visualizations/(?&#x3C;vis_name>.+?)/static/(?&#x3C;static_file>.*?)$ {\n        alias /my_galaxy_dir/config/plugins/visualizations/$vis_name/static/$static_file;\n    }\n</code></pre>\n</div>\n"}},"context":{}}