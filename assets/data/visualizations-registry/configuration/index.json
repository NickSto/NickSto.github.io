{"hash":"fe50d2d58b71effa03c01b08cdaab48b91e9d3d3","data":{"article":{"id":"3735421c69fad1b4dbc2c5a899ea5916","title":"","tease":"","category":null,"date":null,"days":null,"contact":"","contact_url":"","authors":"","location":"","location_url":"","source_blog":"","source_blog_url":"","skip_title_render":null,"links":[],"image":"","images":{},"external_url":"","content":"<div class=\"toc-wrapper col-md-3\">\n<ul>\n<li>\n<p><a href=\"#data-sources-and-tests-what-types-of-data-can-be-visualized\">Data Sources and Tests: What types of data can be visualized</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"#model_class\">model_class</a></li>\n<li><a href=\"#test\">test</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#data-sources-and-to_params-how-to-define-outgoing-links-to-your-visualization\">Data Sources and to_params: How to define outgoing links to your visualization</a></li>\n<li><a href=\"#params-how-to-parse-an-incoming-link-for-your-template\">Params: How to parse an incoming link for your template</a></li>\n<li><a href=\"#other-configuration-options\">Other configuration options</a></li>\n<li><a href=\"#troubleshooting\">Troubleshooting</a></li>\n</ul>\n</div>\n<div class=\"body-wrapper col-md-9\">\n<h2 id=\"data-sources-and-tests-what-types-of-data-can-be-visualized\"><a href=\"#data-sources-and-tests-what-types-of-data-can-be-visualized\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Data Sources and Tests: What types of data can be visualized</h2>\n<p>There can be multiple possible sources/target objects defined for each visualization, For example, a visualization may\nbe applicable to both SAM and BAM files and have a <code>data_source</code> defined for each:</p>\n<pre><code class=\"language-xml\">    &#x3C;data_sources>\n        &#x3C;data_source>\n            &#x3C;model_class>HistoryDatasetAssociation&#x3C;/model_class>\n            &#x3C;test type=\"isinstance\" test_attr=\"datatype\" result_type=\"datatype\">tabular.Sam&#x3C;/test>\n        &#x3C;/data_source>\n        &#x3C;data_source>\n            &#x3C;model_class>HistoryDatasetAssociation&#x3C;/model_class>\n            &#x3C;test type=\"isinstance\" test_attr=\"datatype\" result_type=\"datatype\">binary.Bam&#x3C;/test>\n        &#x3C;/data_source>\n    &#x3C;/data_sources>\n    ...\n</code></pre>\n<p>When the registry is deciding whether to render a link:</p>\n<ul>\n<li>Each <code>data_source</code> is checked in turn.</li>\n<li>If the source of data passes any of the tests in a <code>data_source</code> a link is rendered.</li>\n<li>If the <code>data_source</code> tests fail, the next <code>data_source</code> is checked and the process is repeated until there are no\nmore <code>data_sources</code>.</li>\n</ul>\n<p>In the example above, if the registry was checking a BAM file, the first <code>data_source</code>'s tests would fail, the registry\nwould check the next <code>data_source</code>, those tests would pass, and a link would be rendered.</p>\n<p>This control flow described above implicitly means that it's better to order <code>data_sources</code> from more specific first to\nmore general after. This allows us to send different or added settings based on the 'cascading' effect of the flow.</p>\n<h4 id=\"model_class\"><a href=\"#model_class\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>model_class</h4>\n<p>Inside each <code>data_source</code>, the first test uses the <code>data_source</code> sub-element <code>model_class</code>. If the target object is\nthe same python class as the class listed here, then the remaining <code>data_source</code> tests are then run.</p>\n<pre><code class=\"language-xml\">        &#x3C;data_source>\n            &#x3C;model_class>HistoryDatasetAssociation&#x3C;/model_class>\n            ...\n        &#x3C;/data_source>\n</code></pre>\n<p><strong><code>model_class</code> is the only required test for all <code>data_sources</code> and must be defined</strong>.</p>\n<p>In the majority of cases, your visualization will be using data from a dataset in a user's history - so\n<code>HistoryDatasetAssociation</code> will be the proper setting.</p>\n<h4 id=\"test\"><a href=\"#test\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>test</h4>\n<p><code>test</code> elements define tests to see if a visualization can be applied using the model as a source of data. <strong>If\nany single test passes, the visualization is considered applicable</strong> and a link will be rendered (in other words, the\ntests are effectively OR'ed). There can be zero or more data_source tests (sometimes just checking the model_class alone\nis enough information).</p>\n<p>(Note: the <code>model_class</code> is an exception to tests being OR'd: it is effectively AND'd to the whole set of tests.)</p>\n<p>Test <code>type</code>s are currently limited to:</p>\n<ol>\n<li><strong>isinstance</strong>: testing a LibraryDatasetDatasetAssociation or HistoryDatasetAssociation's <code>.datatype</code> attribute\nfor class inheritance:</li>\n</ol>\n<pre><code class=\"language-xml\">&#x3C;test type=\"isinstance\" test_attr=\"datatype\" result_type=\"datatype\">data.Newick&#x3C;/test>\n</code></pre>\n<ol start=\"2\">\n<li><strong>has_dataprovider</strong>: testing if the attribute of a data_source/model has a specific\n<a href=\"/data-providers/\">DataProvider</a>:</li>\n</ol>\n<pre><code class=\"language-xml\">&#x3C;test type=\"has_dataprovider\" test_attr=\"datatype\">node-edge&#x3C;/test>\n</code></pre>\n<p>or 3) <strong>eq</strong>: using string comparison of any model's attribute (the default - no <code>type</code>s are required):</p>\n<pre><code class=\"language-xml\">&#x3C;test test_attr=\"dbkey\">hg18&#x3C;/test>\n</code></pre>\n<p>Note that, for <code>datatype</code> testing:</p>\n<ul>\n<li>you need to use the datatype module namespace (e.g. <code>data.Newick</code> or <code>tabular.Tabular</code>)</li>\n<li>the use of isinstance allows you some flexibility for your testing, as any sub-class of a datatype will still pass\nthe <code>datatype</code> test (e.g. a SAM file will be considered applicable if you test for the <code>datatype</code> <code>tabular.Tabular</code>)</li>\n<li>datatypes are checked against the datatype registry of your Galaxy installation</li>\n</ul>\n<hr>\n<h2 id=\"data-sources-and-to_params-how-to-define-outgoing-links-to-your-visualization\"><a href=\"#data-sources-and-to_params-how-to-define-outgoing-links-to-your-visualization\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Data Sources and to_params: How to define outgoing links to your visualization</h2>\n<p>Each <code>data_source</code> can define zero or more <code>to_param</code> elements. Each <code>to_param</code> will add one key/value pair\nto the query string of the URL of your link <strong>allowing control over what information is contained in your visualization\nlink and controlling what is passed to your visualization code</strong>. For example:</p>\n<pre><code class=\"language-xml\">    &#x3C;data_source>\n        &#x3C;model_class>HistoryDatasetAssociation&#x3C;/model_class>\n        &#x3C;test type=\"isinstance\" test_attr=\"datatype\" result_type=\"datatype\">tabular.Sam&#x3C;/test>\n        &#x3C;to_param param_attr=\"id\">dataset_id&#x3C;/to_param>\n    &#x3C;/data_source>\n    ...\n</code></pre>\n<p>In this case, the to_param will take the attribute of the target object 'id' (<code>param_attr=\"id\"</code>) and attach a key\nvalue pair on the generated link query string of: <code>?dataset_id=&#x3C;the HDAs id></code>.</p>\n<p>Note: ids are automatically encoded when the link is generated.</p>\n<p>The final link generated points to the exposed render method of the visualization.py controller:</p>\n<pre><code class=\"language-html\">&#x3C;a href=\"http://localhost:8080/visualization/show/myvis?dataset_id=f7bb1edd6b95db62\">My Visualization&#x3C;/a>\n</code></pre>\n<p>The visualization name is passed as the first argument and appears after the <code>show</code> 'verb'.</p>\n<p>Other values can be passed in as well depending on the data source either using the target's attributes or direct\nassignment:</p>\n<pre><code class=\"language-xml\">&#x3C;data_source>\n  &#x3C;model_class>LibraryDatasetDatasetAssociation&#x3C;/model_class>\n  &#x3C;test type=\"isinstance\" test_attr=\"datatype\" result_type=\"datatype\">data.Data&#x3C;/test>\n  &#x3C;to_param param_attr=\"id\">dataset_id&#x3C;/to_param>\n  &#x3C;to_param assign=\"ldda\">hda_ldda&#x3C;/to_param>\n&#x3C;/data_source>\n</code></pre>\n<pre><code class=\"language-#!\">&#x3C;a href=\"http://localhost:8080/visualization/show/myvis?dataset_id=f7bb1edd6b95db62&#x26;hda_ldda=ldda\">My Visualization&#x3C;/a>\n</code></pre>\n<hr>\n<h2 id=\"params-how-to-parse-an-incoming-link-for-your-template\"><a href=\"#params-how-to-parse-an-incoming-link-for-your-template\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Params: How to parse an incoming link for your template</h2>\n<p>When the link generated from the <code>data_source</code> is used, <strong>resources listed in <code>params</code> are parsed from the query string\nand sent to the template</strong>. 'Resources' can be considered any data that needs to be parsed or converted from a string\nbefore being sent to the visualization template (primitives such as <code>int</code>s or <code>bool</code>eans, more complex data such as\nmodels, or lists of either).</p>\n<p>The registry uses the <code>ResourceParser</code> class located in <code>lib/galaxy/visualization/plugins/resource_parser.py</code> to do this.</p>\n<p>For example, the scatterplot visualization has the following params (it only needs one 'resource' - the HDA target):</p>\n<pre><code class=\"language-xml\">      &#x3C;param type=\"dataset\" var_name_in_template=\"hda\" required=\"true\">dataset_id&#x3C;/param>\n</code></pre>\n<ul>\n<li>The text node of the element is the key of the key/value pair in the query string: <code>dataset_id</code></li>\n<li>The <code>required=\"true\"</code> attribute tells the registry to throw an error immediately if the <code>dataset_id</code> key is not in\nthe query string of the incoming link</li>\n<li>The type tells the registry to convert that value into a dataset (implicitly the dataset type receives an id)</li>\n<li>The registry will attempt to get the full model of the dataset (SQLAlchemy <code>eagerloading</code> is on)</li>\n<li>The <code>var_name_in_template</code> tells the registry to pass the dataset model to the template using the context variable\nname <code>hda</code></li>\n</ul>\n<p>Other complex <code>params</code> are also parsed:</p>\n<ul>\n<li><code>type=\"hda_or_ldda\"</code>: for visualizations that accept either an HDA or LDDA</li>\n<li><code>type=\"dbkey\"</code>: for visualizations that require the genome build of a target object</li>\n<li><code>type=\"json\"</code>: when data is bundled and passed as JSON (the string will be parsed into a python structure for the\ntemplate)</li>\n</ul>\n<p>Primitive types are parsed as well: 'str', 'bool', 'int', 'float' ('str' is the default type).</p>\n<p>Besides the <code>param</code> attributes above, the following are also available:</p>\n<ul>\n<li>csv : <code>csv=\"true\"</code> will split the query string value at commas, and recursively parse each element using the <code>type</code>\nattribute sending the final list to the template. For example: <code>&#x3C;param type=\"int\" csv=\"true\">indeces&#x3C;/param></code> would\nparse the query string key/value pair <code>?indeces=3,4,9,12&#x26;</code> and send it to the template as: <code>indeces = [ 3, 4, 9, 12 ]</code></li>\n<li>default : you can provide a default value for a param and, if it's missing from the query string, that value will\nbe parsed using <code>type</code> and sent to the template</li>\n</ul>\n<p>Any parameters defined in the <code>params</code> section of your config file are available here. In addition, other variables\nare available (see <a href=\"/visualizations-registry/code/\">VisualizationsRegistry/Code</a> for more info).</p>\n<h2 id=\"other-configuration-options\"><a href=\"#other-configuration-options\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Other configuration options</h2>\n<p>You can also optionally specify a <code>render_location</code> element. This becomes the <code>target</code> attribute of the link generated\nfor your visualizations. If you want the visualization to load in a new window, set this to <code>_blank</code>, in the top frame\n(and therefore remove the two side panels) use <code>_top</code>, or if you're fine loading it in the center panel with both\nside panels in place use <code>galaxy_main</code> (this is the default <code>render_location</code>).</p>\n<h2 id=\"troubleshooting\"><a href=\"#troubleshooting\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Troubleshooting</h2>\n<p>You can <strong>test the validity of your XML registry file</strong> by using the DTD defined in <code>visualizations_conf.xml</code> itself.\nOn the command line:</p>\n<pre><code class=\"language-bash\">xmllint --valid --noout myvis.xml\n</code></pre>\n<p>If <strong>there's an error parsing the configuration</strong> of a visualization, you'll find an error similar to this in the\nserver logs:</p>\n<pre><code class=\"language-#!\">galaxy.web.base.pluginframework WARNING 2014-01-28 10:26:04,147 VisualizationsRegistry, plugin load failed or disabled:\n./config/plugins/visualizations/sweepster. Skipping...\n</code></pre>\n<p>If a configuration loads successfully and you're <strong>not seeing a link</strong> to it on a dataset or data source that\n<em>should</em> display one:</p>\n<ul>\n<li>Check the configurations <code>model_class</code> - it is case sensitive and the class should be part of <code>model/__init__.py</code></li>\n<li>Check the order of your <code>data_sources</code> - order matters here - go from specific first to general</li>\n<li>Check your tests - attributes must be valid attributes of the <code>model_class</code></li>\n</ul>\n<p>If <strong>your link isn't turning out properly</strong>, check your <code>param</code> definitions. Again, they need to be valid attributes\nof the <code>model_class</code>.</p>\n</div>\n"}},"context":{}}