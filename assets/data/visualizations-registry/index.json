{"hash":"4f66c62fb6940f4cd6ecf5e4a1e2d62361ec5ff4","data":{"article":{"id":"15126aa2654067bbf6031e4d7f0b6988","title":"The Visualizations Registry","tease":"","category":null,"date":null,"days":null,"contact":"","contact_url":"","fileInfo":{"path":"build/content-md/visualizations-registry/index.md"},"authors":"","location":"","location_url":"","source_blog":"","source_blog_url":"","skip_title_render":null,"redirect":"","autotoc":null,"links":[],"image":"","images":{},"external_url":"","content":"<div class=\"toc-wrapper col-md-3\">\n<ul>\n<li><a href=\"#enabling-visualization-plugins-on-your-galaxy-installation\">Enabling visualization plugins on your Galaxy installation</a></li>\n<li><a href=\"#configuring-your-visualization-plugin-in-the-visualization_plugins_directory\">Configuring your visualization plugin in the <code>visualization_plugins_directory</code></a></li>\n<li>\n<p><a href=\"#the-visualization-configuration-file\">The visualization configuration file</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"#a-simple-example\">A simple example</a></li>\n<li><a href=\"#data_sources--getting-visualization-data-into-a-link\">data_sources : getting visualization data into a link</a></li>\n<li><a href=\"#params--getting-link-data-into-your-code\">params : getting link data into your code</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#creating-the-code-and-markup-for-your-visualization\">Creating the code and markup for your visualization</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"#your-visualizations-template-file\">Your visualizations template file</a></li>\n<li><a href=\"#the-data-in-your-target-dataset\">The data in your target dataset</a></li>\n<li><a href=\"#static-files-for-your-visualization\">Static files for your visualization</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#further-examples\">Further examples</a></li>\n</ul>\n</div>\n<div class=\"body-wrapper col-md-9\">\n<p>The visualizations registry and plugin framework provides an easy way to create new, custom visualizations for almost\nany data.</p>\n<p>(For information on existing and built-in visualizations such as Trackster, please see:\n<a href=\"/learn/visualization/\">Learn/Visualization</a> and <a href=\"/visualization-setup/\">Visualization Setup</a>)</p>\n<p>There are three main steps to creating a visualization:</p>\n<ol>\n<li>Enabling visualization plugins on your Galaxy installation</li>\n<li>Configuring your visualization plugin in the <code>visualization_plugins_directory</code></li>\n<li>Creating the code and markup for your visualization</li>\n</ol>\n<p>(For more examples of on how the visualizations registry can be used than are on this page, see\n<a href=\"/visualizations-registry/cookbook/\">Visualizations Registry Cookbook</a>.</p>\n<h2 id=\"enabling-visualization-plugins-on-your-galaxy-installation\"><a href=\"#enabling-visualization-plugins-on-your-galaxy-installation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Enabling visualization plugins on your Galaxy installation</h2>\n<p>The visualizations registry uses a plugin architecture where the configuration, code, and markup for your\nvisualization's web page is placed within the <code>visualization_plugins_directory</code> of your Galaxy installation.</p>\n<p>The <code>visualization_plugins_directory</code> is a setting in your <code>galaxy.ini</code> file (located in <code>&#x3C;your galaxy directory>/config/</code>) that tells Galaxy where to scan\nfor visualization plugins. It currently defaults to <code>&#x3C;your galaxy directory>/config/plugins/visualizations</code>\nbut can be set to any relative (to the galaxy directory) or absolute path reachable on the file system.</p>\n<p>Make sure this setting is uncommented and set to the directory from which you want to serve visualizations:</p>\n<pre><code class=\"language-bash\"># Visualizations config directory: where to look for individual visualization plugins.\n# The path is relative to the Galaxy root dir. To use an absolute path begin the path\n# with '/'.\nvisualization_plugins_directory = config/plugins/visualizations\n</code></pre>\n<p>When enabled, the server log will print log messages when it finds and successfully loads a visualization plugin:</p>\n<pre><code class=\"language-#!\">galaxy.web.base.pluginframework INFO 2014-01-28 10:26:04,147 VisualizationsRegistry, loaded plugin: scatterplot\n</code></pre>\n<p>If there's an error in your visualization's configuration file (or it's been disabled), you'll see:</p>\n<pre><code class=\"language-#!\">galaxy.web.base.pluginframework WARNING 2014-01-28 10:26:04,147 VisualizationsRegistry, plugin load failed or disabled:\n./config/plugins/visualizations/sweepster. Skipping...\n</code></pre>\n<p>When testing to see if your new plugin has been loaded, it's useful to look for these messages and any errors that\nare output around them.</p>\n<hr>\n<h2 id=\"configuring-your-visualization-plugin-in-the-visualization_plugins_directory\"><a href=\"#configuring-your-visualization-plugin-in-the-visualization_plugins_directory\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Configuring your visualization plugin in the <code>visualization_plugins_directory</code></h2>\n<p>The second step to creating a new visualization plugin is to create the directories and (initial) files that the plugin\nwill use. At the very least, your plugin <em>must</em> have:</p>\n<ol>\n<li>A base directory within the <code>visualization_plugins_directory</code> with your visualization's name</li>\n<li>A <code>config</code> directory and XML configuration file</li>\n<li>A <code>template</code> directory and <a href=\"http://www.makotemplates.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Mako</a> template file (or files)</li>\n</ol>\n<p>For example, if your new visualization was to be called 'myvis', you'd need a structure like this:</p>\n<pre><code class=\"language-#!\">config/plugins/visualizations/\n    └── myvis/\n        ├── config/\n        │       myvis.xml\n        └── templates/\n                myvis.mako\n</code></pre>\n<p>If a plugin doesn't have these basic files, it will fail to load. Note: <strong>The config file and mako file must share the\nsame name as the plugin name / plugin directory.</strong> In the example above that would be 'myvis', 'myvis.xml', and\n'myvis.mako'.</p>\n<p>Additionally and optionally, you can also include a <code>static</code> directory and any statically served files your\nvisualization may need (CSS, javascript, etc.):</p>\n<pre><code class=\"language-#!\">config/plugins/visualizations/\n    └── myvis/\n        ├── config/\n        │       myvis.xml\n        ├── templates/\n        │       myvis.mako\n        └── static/\n                myscript.js\n                js2.js\n                vis-style.css\n</code></pre>\n<p>We'll cover each of these elements.</p>\n<hr>\n<h2 id=\"the-visualization-configuration-file\"><a href=\"#the-visualization-configuration-file\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>The visualization configuration file</h2>\n<p>The configuration file in your visualization's <code>config</code> directory allows you a number of options to control how and\nwhere your visualization is accessible to a user and the information your code will receive from Galaxy, including:</p>\n<ol>\n<li>what types of data are able to be visualized with the new visualization</li>\n<li>how to create a link to the visualization when given the data</li>\n<li>how to parse and render information from an incoming link and query string into the final visualization page</li>\n</ol>\n<p>The easiest way to get started is to simply copy an existing, working configuration file (such as\n<code>config/plugins/visualizations/scatterplot/config/scatterplot.xml</code>) into your directory, rename it, and do only minor\nediting. Chances are you won't need most of the options. We'll cover the basics here and more advanced options later.</p>\n<p>Note: when your done editing your configuration file, you'll need to restart Galaxy in order for your visualization\nplugin to be loaded.</p>\n<h4 id=\"a-simple-example\"><a href=\"#a-simple-example\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>A simple example</h4>\n<p>Here's an example configuration file for a visualization that uses SAM data from a dataset in a user's history:</p>\n<pre><code class=\"language-xml\">&#x3C;?xml version=\"1.0\" encoding=\"UTF-8\"?>\n&#x3C;!DOCTYPE visualization SYSTEM \"../../visualization.dtd\">\n&#x3C;visualization name=\"SAM Visualization\">\n    &#x3C;data_sources>\n        &#x3C;data_source>\n            &#x3C;model_class>HistoryDatasetAssociation&#x3C;/model_class>\n            &#x3C;test type=\"isinstance\" test_attr=\"datatype\" result_type=\"datatype\">tabular.Sam&#x3C;/test>\n            &#x3C;to_param param_attr=\"id\">dataset_id&#x3C;/to_param>\n        &#x3C;/data_source>\n    &#x3C;/data_sources>\n    &#x3C;params>\n        &#x3C;param type=\"dataset\" var_name_in_template=\"hda\" required=\"true\">dataset_id&#x3C;/param>\n    &#x3C;/params>\n    &#x3C;template>sam.mako&#x3C;/template>\n&#x3C;/visualization>\n</code></pre>\n<ul>\n<li>Lines 1 and 2 are the xml language definition and a doctype definition respectively. These are required. The\n<code>visualization.dtd</code> entry on line 2 describes the location of an XML DTD file that defines all the possible\nvalid options for a visualization configuration file. You may find this useful as a reference for advanced options.</li>\n<li>Line 3 begins the visualization definition and contains the name attribute. This is the name that will commonly be\nshown to users when the server creates a link to your visualization. It does not have to match the visualization name\nyou used for the directory and files but should still be unique.</li>\n<li>Lines 4 through 13 contain two main sections: <code>data_sources</code> and <code>params</code>. These are explained next.</li>\n<li>Line 14 defines the main Mako template used when serving the visualization. This is required.</li>\n</ul>\n<p><em>You can think of the <code>data_source</code> and <code>param</code> definitions in your configuration file as two ends of a pipe</em>. On one\nend is some source of data you'd want to visualize and on the other end is the code that will generate your\nvisualization's web page. <code>data_source</code> definitions allow us to define when a link will be rendered for a user give some\nsource of visualization data.</p>\n<pre><code>    some data source -> `data_source` definition -> link -> `param` definition -> your visualization code\n</code></pre>\n<h4 id=\"data_sources--getting-visualization-data-into-a-link\"><a href=\"#data_sources--getting-visualization-data-into-a-link\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>data_sources : getting visualization data into a link</h4>\n<ul>\n<li>Define when a visualization will apply and what sources of data it can use.</li>\n<li>Help to serialize (in effect) that data source by defining how a link to it (and your visualization) will be created.</li>\n<li>Allow you to send in optional data and settings to your visualization code.</li>\n</ul>\n<p>Not every visualization will or should be able to handle or use every type of data: a visualization that draws\nphylogenetic trees might not be able to work with SAM data and so a SAM dataset should never be rendered with a link\nto that visualization. In order to tell the registry (and Galaxy) when our visualization will apply and should be linked\nto, we define a series of tests for the source of data or target object.</p>\n<p>In our example, we only define one <code>data_source</code> and only test two attributes of that source to see if our visualization\ncan work with it:</p>\n<p>a) is it a dataset from a user's history?</p>\n<pre><code class=\"language-xml\">        &#x3C;data_source>\n            &#x3C;model_class>HistoryDatasetAssociation&#x3C;/model_class>\n            ...\n        &#x3C;/data_source>\n</code></pre>\n<p>This sees if the source of data has the python class <code>HistoryDatasetAssociation</code> which is the Galaxy class name for a\ndataset contained within a history.</p>\n<p>and b) is the dataset in the SAM format/datatype?</p>\n<pre><code class=\"language-xml\">        &#x3C;data_source>\n            ...\n            &#x3C;test type=\"isinstance\" test_attr=\"datatype\" result_type=\"datatype\">tabular.Sam&#x3C;/test>\n            ...\n        &#x3C;/data_source>\n</code></pre>\n<p>This uses the python <code>isinstance</code> function to test if the <code>dataset.datatype</code> is the datatype class <code>tabular.Sam</code> (or\na subclass of it).</p>\n<p>Finally, if the dataset passes those tests, we can send it (or any other information) to the visualization using a\n<code>to_param</code> definition:</p>\n<pre><code class=\"language-xml\">        &#x3C;data_source>\n            ...\n            &#x3C;to_param param_attr=\"id\">dataset_id&#x3C;/to_param>\n        &#x3C;/data_source>\n</code></pre>\n<p>Here, we're telling the registry to add the <code>HistoryDatasetAssociation</code>'s <code>id</code> attribute to the final, rendered link\n(Note: ids are automatically encoded before being added to the link):</p>\n<pre><code class=\"language-#!\">&#x3C;a href=\"http://localhost:8080/visualization/show/sam?dataset_id=f7bb1edd6b95db62\">SAM Visualization&#x3C;/a>\n</code></pre>\n<p>This allows <code>param</code> definitions (the other end of the pipe) to parse <code>dataset_id</code> back into a\n<code>HistoryDatasetAssociation</code> in your visualization code when the user clicks the link.</p>\n<h4 id=\"params--getting-link-data-into-your-code\"><a href=\"#params--getting-link-data-into-your-code\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>params : getting link data into your code</h4>\n<ul>\n<li>Define when and how the information in a visualization's link is parsed into data usable by the visualization's code.</li>\n</ul>\n<p>In our example, we're attempting to visualize the data within a SAM dataset so we'll need to access the dataset from\nour visualization code (<code>sam.mako</code>). The following <code>param</code> definition allows us to do that:</p>\n<pre><code class=\"language-xml\" class=\"..\">    ...\n    &#x3C;params>\n        &#x3C;param type=\"dataset\" var_name_in_template=\"hda\" required=\"true\">dataset_id&#x3C;/param>\n    &#x3C;/params>\n    ...\n</code></pre>\n<p>This tells the registry that when:</p>\n<pre><code class=\"language-#!\">&#x3C;a href=\"http://localhost:8080/visualization/show/sam?dataset_id=f7bb1edd6b95db62\">SAM Visualization&#x3C;/a>\n</code></pre>\n<p>is clicked:</p>\n<ol>\n<li>the <code>dataset_id</code> should be parsed into a dataset (<code>type=\"dataset\"</code>) by finding the <code>HistoryDatasetAssociation</code>\nwith the encoded id 'f7bb1edd6b95db62' in the database</li>\n<li>the ORM model is passed to the template (in this case, <code>sam.mako</code>) under the name <code>hda</code> (<code>var_name_in_template=\"hda\"</code>)</li>\n<li>if <code>dataset_id</code> is <em>not</em> present in the link, an error will be raised (<code>required=\"true\"</code>)</li>\n</ol>\n<p>Then, within <code>sam.mako</code>, we can access the ORM model of the <code>HistoryDatasetAssociation</code> the link was created for:</p>\n<pre><code class=\"language-#!\">&#x3C;h2>${hda.dataset.datatype} | ${hda.name}&#x3C;/h2>\n</code></pre>\n<p>For more information on visualization configuration options see <a href=\"/visualizations-registry/configuration/\">Visualizations Registry Configuration</a>.</p>\n<hr>\n<h2 id=\"creating-the-code-and-markup-for-your-visualization\"><a href=\"#creating-the-code-and-markup-for-your-visualization\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Creating the code and markup for your visualization</h2>\n<p>The code for your visualization begins with a Mako template file.</p>\n<h4 id=\"your-visualizations-template-file\"><a href=\"#your-visualizations-template-file\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Your visualizations template file</h4>\n<p>The main entry point for any code that you add will be your plugin's Mako template file. Within the template you can:</p>\n<ul>\n<li>import Galaxy modules</li>\n<li>import and use your own modules</li>\n<li>run python code</li>\n<li>use the server to generate HTML or other browser compatible markup</li>\n<li>load static resources like JavaScript libraries and scripts, images, or stylesheets</li>\n<li>call JavaScript for user interface control or client-side rendering</li>\n</ul>\n<p>The template file Galaxy and the visualizations registry will use to start your visualization is defined in your config\nfile:</p>\n<pre><code class=\"language-xml\">&#x3C;visualization name=\"SAM Visualization\">\n    ...\n    &#x3C;template>sam.mako&#x3C;/template>\n&#x3C;/visualization>\n</code></pre>\n<p>This file must be located in the <code>templates</code> directory of your plugin directory.</p>\n<h4 id=\"the-data-in-your-target-dataset\"><a href=\"#the-data-in-your-target-dataset\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>The data in your target dataset</h4>\n<p>Inside the visualization template file, we'll need to access the data inside our target dataset (what we're really\ninterested in, of course).</p>\n<p>From python, the best way to do this is with <code>DataProviders</code>. In the simplest terms, they create a python generator that\ncan iterate over the data in a dataset and output each datum. Each datum has been parsed and is in a specified format\nwith (hopefully) only minimum of work on your part.</p>\n<p>For our example, let's say we want to just print the mapping quality for each read in the file:</p>\n<pre><code class=\"language-mako\" id=\"reads\">    &#x3C;ul id=\"reads\">\n    %for read in hda.datatype.dataprovider( hda, 'dataset-dict' ):\n        # the 'dataset-dict' provider returns lines/reads in a dictionary based on the column names of the dataset:\n        # {'OPT': None, 'RNAME': '*', 'SEQ': ..., 'MAPQ': 0, 'MRNM': '*', 'ISIZE': 0}\n        &#x3C;li>${read['MAPQ']}&#x3C;/li>\n    %endfor\n    &#x3C;/ul>\n</code></pre>\n<p>These are explained more fully at <a href=\"/data-providers/\">Data Providers</a>.</p>\n<h4 id=\"static-files-for-your-visualization\"><a href=\"#static-files-for-your-visualization\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Static files for your visualization</h4>\n<p>You can include static files usable by your visualization's web page by creating a <code>static</code> directory in your plugin's\nbase directory and placing files there. When the server is restarted, Galaxy will serve ...</p>\n<p>For example, if we added a CSS file to our 'SAM Visualization' at <code>sam/static/style.css</code> we could load it and apply\nit like any CSS stylesheet in our final template file by adding the path:</p>\n<pre><code class=\"language-mako\">&#x3C;!DOCTYPE HTML>\n&#x3C;html>\n&#x3C;head>\n&#x3C;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n&#x3C;title>${hda.name | h} | ${visualization_name}&#x3C;/title>\n&#x3C;link type=\"text/css\" rel=\"Stylesheet\" media=\"screen\" href=\"/plugins/visualizations/sam/static/style.css\"\">\n...\n</code></pre>\n<p>Make sure variables that may correspond to user input (e.g. the name of the history item <code>hda.name</code>) and other input that may contain undesired HTML tags, need to be HTML-escaped (<code>${hda.name | h}</code>) to avoid possible code injections.</p>\n<p>Note: we can use sub-directories here if desired. We could create sub-directories 'js', 'css', 'images', 'data' and\nserve different static content from each.</p>\n<p>We can also load any static file normally served by Galaxy as well without having to include them in your\nstatic directory:</p>\n<pre><code class=\"language-mako\">...\n&#x3C;script type=\"text/javascript\" src=\"/static/scripts/libs/jquery/jquery.js\">&#x3C;/script>\n...\n</code></pre>\n<p>For more information on template or static code files see <a href=\"/visualizations-registry/code/\">Visualizations Registry Code</a>.</p>\n<hr>\n<h2 id=\"further-examples\"><a href=\"#further-examples\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Further examples</h2>\n<p>For more examples on how the visualizations registry can be used see <a href=\"/visualizations-registry/cookbook/\">Visualizations Registry Cookbook</a>.</p>\n</div>\n"}},"context":{}}