{"hash":"8532f9dede357a757ee182f7a5f5306dccf4d8d2","data":{"article":{"id":"a461835660e78b7b5b75460b9cca6b54","title":"Syntax Tests","tease":"","skip_title_render":null,"image":"","images":{},"contact":"","inserts":[],"date":null,"content":"\nMixing syntaxes\n---------------\n\n### Markdown + Vue\n\nYou can have **Markdown** on the same line as a Vue component: <g-image src=\"../AWSLogo.png\" />\n\n```\nimport YouTube from '~/components/YouTube.vue'\n\nLet's try a *custom* component: <YouTube id=\"ZchkP43avXg\" />\n```\n\n### Markdown + HTML\n\n<div class=\"test\">But mixing HTML is still bad, *right*?</div>\nYep, looks like it.\n\n### HTML + Vue\n\n<div class=\"test2\">Okay but how about HTML+Vue? <YouTube id=\"ZchkP43avXg\" /></div>\nIt works!\n\nLiteral HTML tags\n-----------------\n\n### Bare HTML tags\n\nBare HTML tags like `<test>` mixed in with regular content are interpreted as real HTML and parsed. Any \"invalid\" markup like missing end tags result in an error.\n\nValid, but custom tags (`<test></test>`) compile and are passed directly into the final HTML, but produce a console error:\n\n`<test></test>`\n\nCustom self-closing tags (`<test/>`) also compile and are passed directly into the final HTML, and also produce a console error:\n\n<test/>\n\nValid, standard tag that's allowed to omit an end tag (`<p>test`):\n\n<p>test\n\n### Backticks\n\n<test></test>\n\nBut putting them in backticks like `` `<test>` `` prevents errors, as do backtick code blocks:\n\n```\n<requirements>\n  <requirement type='package' version='X.Y.Z'>NAME</requirement>\n</requirements>\n```\n\nMarkdown links\n--------------\n\n### HTML inside\n\n**Note**: In these cases, HTML elements inside the link render as actual HTML.\n\nNo error:      [link text](/use/)\n\nNo error:      [<p>hi</p>](/use/)\n\nNo error:      [link text](/image)\n\nThrows error: `[link text](image.png)`\n\nThrows error: `[<p>hi</p>](image.png)`\n\nNo error:      [link text](/image.png)\n\nThrows error: `[<p>hi</p>](./image.png)`\n\nNo error:      [<p>hi</p>](/images/icons/GTN32.png)\n\nNo error:      [<p>hi</p>](/images/icons/nonexistent.png)\n\n### Does existence of the file matter?\n\nThrows error: `[link text](exists.png)`\n\nThrows error: `[link text](nonexistent.png)`\n\nNo error:      [link text](/exists.png)\n\nThrows error: `[link text](./nonexistent.png)`\n\nThrows error: `[link text](reldir/exists.png)`\n\nNo error:      [link text](/reldir/exists.png)\n\nThrows error: `[link text](./reldir/nonexistent.png)`\n\nNo error:      [link text](/reldir/nonexistent)\n\nThrows error: `[link text](images/icons/nonexistent.png)`\n\nNo error:      [link text](/images/icons/nonexistent.png)\n\nNo error:      [link text](/images/icons/GTN32.png)\n\nNo error:      [link text](/nonexistent/)\n\n### Image elements\n\n**Note**: In these cases, the `<p>hi</p>` HTML does not render and is displayed instead as text (what else would happen? `<img>` elements can't really contain children).\n\nNo error:      ![alt textt](/images/static.jpg)\n\nNo error:      ![\\<p>hi\\</p>](/images/static.jpg)\n\nThrows error: `![alt textt](image.png)`\n\nThrows error: `![<p>hi</p>](image.png)`\n\nNo error:      ![alt textt](./image.png)\n\nNo error:      ![\\<p>hi\\</p>](./image.png)\n\nThrows error: `![alt textt](./nonexistent.png)`\n\nThrows error: `![link text](reldir/exists.png)`\n\nNo error:      ![link text](./reldir/exists.png)\n\n### `<g-image>`s\n\n**Note**: In all these cases, all child elements of the `<g-image>` are lost. Even simple text is gone when it renders.\n\nNo error:      <g-image alt=\"alt text\" src=\"/\" />\n\nNo error:      <g-image alt=\"alt text\" src=\"/\">hello you</g-image>\n\nNo error:      <g-image alt=\"alt text\" src=\"/\"><p>hi</p></g-image>\n\nThrows error: `<g-image alt=\"alt text\" src=\"image.png\" />`\n\nNo error:      <g-image alt=\"alt text\" src=\"./image.png\" />\n\nThrows error: `<g-image alt=\"alt text\" src=\"reldir/exists.png\" />`\n\nNo error:      <g-image alt=\"alt text\" src=\"./reldir/exists.png\" />\n"}},"context":{}}