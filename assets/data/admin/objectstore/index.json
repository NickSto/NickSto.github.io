{"hash":"49d9aebfc2ce77342c0ce224e1cb2c1a248b7103","data":{"article":{"id":"f7816acfdc4f4ef6f7eae46d92ec2395","title":"Galaxy ObjectStore","tease":"","category":null,"date":null,"days":null,"contact":"","contact_url":"","authors":"","location":"","location_url":"","source_blog":"","source_blog_url":"","skip_title_render":null,"redirect":"","links":[],"image":"","images":{},"external_url":"","content":"<div class=\"toc-wrapper col-md-3\">\n<ul>\n<li><a href=\"#galaxy-objectstore-backends\">Galaxy ObjectStore Backends</a></li>\n<li><a href=\"#objectstore-configuration\">ObjectStore Configuration</a></li>\n<li><a href=\"#data-distribution-methods\">Data Distribution Methods</a></li>\n</ul>\n</div>\n<div class=\"body-wrapper col-md-9\">\n<p>ObjectStore is Galaxy's data virtualization technology; it abstracts\nGalaxy's business logic for data persistence technology and topology.\nIn other words, the ObjectStore makes it possible to store data on a\nwide-variety of persistence media spanning from a local storage to\ncloud-based solutions and define any data distribution policy, without\naltering Galaxy's model, functions, api, or any component of its\nbusiness logic in general.</p>\n<p>The ObjectStore allows a Galaxy installation to make use of data\nliving in more than simply a single filesystem of locally mounted disk.\nAccordingly, ObjectStore enables Galaxy admins to <em>plug</em> additional\npersistence media to an existing file system, which facilitates\nexpanding a mounted filesystem (e.g., when it has ran out of space) without\nhaving to move data. Additionally, ObjectStore enables replicating\ndata onto multiple persistence media, which increases Galaxy's data\naccess fault-tolerance, in case any of the media becomes inaccessible.</p>\n<blockquote>\n<p>Note that ObjectStore is configurable by a Galaxy admin, and data\nbelonging to all the users of that Galaxy instance will be stored\non the defined persistence media.</p>\n</blockquote>\n<p>Related publications and presentations:</p>\n<ul>\n<li><a href=\"https://www.biorxiv.org/node/149950.abstract\" target=\"_blank\" rel=\"noopener noreferrer\">Jalili, V., et al. \"Cloud Bursting Galaxy: Federated Identity and Access Management.\"</a>;</li>\n<li><a href=\"http://doi.ieeecomputersociety.org/10.1109/CLOUD.2018.00124\" target=\"_blank\" rel=\"noopener noreferrer\">Afgan, E., et al. \"Federated Galaxy: Biomedical Computing at the Frontier.\" IEEE CLOUD 2018</a>;</li>\n<li><a href=\"https://vimeo.com/291738189\" target=\"_blank\" rel=\"noopener noreferrer\">Jalili, V., et al. \"Storage Media Federation for Galaxy.\" GCCBOSC 2018</a>;</li>\n</ul>\n<h2 id=\"galaxy-objectstore-backends\"><a href=\"#galaxy-objectstore-backends\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Galaxy ObjectStore Backends</h2>\n<p>A backend is any persistence media that ObjectStore can be configured\nto read/write from/to. The following is a list of backends that\nObjectStore currently supports:</p>\n<ul>\n<li>Local storage (e.g., disk);</li>\n<li>Network attached storage (NAS);</li>\n<li>\n<p>Cloud</p>\n<ul>\n<li>Amazon Simple Storage Service (S3);</li>\n<li>Google Cloud Storage (<a href=\"/admin/objectstore/gce/\">config</a>);</li>\n<li>Microsoft Azure BLOB Storage;</li>\n<li>OpenStack Object Storage (Swift)</li>\n</ul>\n</li>\n<li>integrated Rule-Oriented Data Store (iRODS)</li>\n</ul>\n<h2 id=\"objectstore-configuration\"><a href=\"#objectstore-configuration\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ObjectStore Configuration</h2>\n<p>In order to configure ObjectStore you may take the following steps:</p>\n<ol>\n<li>\n<p>Set the path to ObjectStore configuration file in <code>config/galaxy.yml</code>\n(not to be mistaken with <code>config/galaxy.yml.sample</code>) as the\nfollowing.</p>\n<pre><code># Configuration file for the object store. If this is set and exists,\n# it overrides any other objectstore settings. The value of this option \n# will be resolved with respect to &#x3C;config_dir>.\nobject_store_config_file: object_store_conf.xml\n</code></pre>\n</li>\n<li>\n<p>Create the <code>object_store_conf.xml</code> file (you may\nuse <code>&#x3C;config_dir>/object_store_conf.xml.sample</code> as template/reference), and\nset it as the following:</p>\n<pre><code class=\"language-xml\">&#x3C;?xml version=\"1.0\"?>\n&#x3C;object_store type=\"...\">\n    &#x3C;!-- Backend-specific setters.  -->\n&#x3C;/object_store>\n</code></pre>\n<p>where the <code>type</code> attribute can have any of the following values:</p>\n<pre><code>{cloud, disk, distributed, hierarchical, azure_blob, s3, swift, irods, pithos}\n</code></pre>\n<p>For instance, the following configuration defines a single <code>disk</code> storage:</p>\n<pre><code class=\"language-xml\">&#x3C;?xml version=\"1.0\"?>\n&#x3C;object_store type=\"disk\">\n   &#x3C;files_dir path=\"database/files\"/>\n   &#x3C;extra_dir type=\"temp\" path=\"database/tmp\"/>\n   &#x3C;extra_dir type=\"job_work\" path=\"database/job_working_directory\"/>\n&#x3C;/object_store>\n</code></pre>\n<p>For backend-specific configuration, see <a href=\"#galaxy-objectstore-backends\">ObjectStore Backends section</a>.</p>\n</li>\n<li>Restart Galaxy for changes to take place.</li>\n</ol>\n<h2 id=\"data-distribution-methods\"><a href=\"#data-distribution-methods\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Data Distribution Methods</h2>\n<p>A Galaxy admin can set ObjectStore to leverage either a single\nbackend, or define a nested relation between multiple backends.\nTo use a single backend, provide the backend-specific configuration\n(e.g., similar to the above <code>disk</code> example), and Galaxy will always\nread/write to that backend.</p>\n<p>In order to define a nested relation of multiple backends, you may\nuse <code>hierarchical</code> or <code>distributed</code> backends. The following table\ncaptures the difference between the <code>hierarchical</code> and <code>distributed</code>\nbackends:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\">Where data is read from?</th>\n<th align=\"left\">Where data is written to?</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Hierarchical</td>\n<td align=\"left\">first backend where data exists</td>\n<td align=\"left\">always the first backend</td>\n</tr>\n<tr>\n<td align=\"left\">Distributed</td>\n<td align=\"left\">first backend where data exists</td>\n<td align=\"left\">pseudo-randomly selected backend</td>\n</tr>\n</tbody>\n</table>\n<p>For instance, using the following configuration, ObjectStore always\nwrites data on S3, but retrieves data from the first backend where\nthe data exists.</p>\n<pre><code class=\"language-xml\">&#x3C;?xml version=\"1.0\"?>\n&#x3C;object_store type=\"hierarchical\">\n    &#x3C;backends>\n        &#x3C;object_store type=\"cloud\" provider=\"aws\" order=\"0\">\n            &#x3C;auth access_key=\"...\" secret_key=\"...\" />\n            &#x3C;bucket name=\"...\" use_reduced_redundancy=\"False\" />\n            &#x3C;cache path=\"database/object_store_cache\" size=\"100\" />\n            &#x3C;extra_dir type=\"job_work\" path=\"database/job_working_directory_s3\"/>\n            &#x3C;extra_dir type=\"temp\" path=\"database/tmp_s3\"/>\n        &#x3C;/object_store>\n        &#x3C;object_store type=\"disk\" id=\"secondary\" order=\"1\">\n            &#x3C;files_dir path=\"database/files\"/>\n            &#x3C;extra_dir type=\"temp\" path=\"database/tmp\"/>\n            &#x3C;extra_dir type=\"job_work\" path=\"database/job_working_directory\"/>\n        &#x3C;/object_store>\n    &#x3C;/backends>\n&#x3C;/object_store>\n</code></pre>\n<p>This configuration is useful when you have been using a backend for a while,\nthen you decide to \"extend\" it by adding a new backend, <strong>but without having to\nmove data from previous backend to the new backend</strong>. For instance, you been\nusing <code>disk</code> for a while, but now you have ran out of space on <code>disk</code>, so you\ndecided to add an S3 bucket; you would like to do so by (a) keeping the existing\ndata on <code>disk</code> as they are, and still be able to use them for any job/workflow\nexecution, and (b) you would like any new data to be persisted on S3.\nThis is the scenario for which the <code>hierarchical</code> ObjectStore is defined for,\nas it will always persist new data on S3, and can look for data on both S3 and\n<code>disk</code> (where it will find data created prior to adding S3).</p>\n<p>On the other hand, the <code>distributed</code> ObjectStore pseudo-randomly selects a\nbackend to which it should persist data. (The pseudo-random selection is based on\nadmin-specified weights for backends.) For instance:</p>\n<pre><code class=\"language-xml\">&#x3C;?xml version=\"1.0\"?>\n&#x3C;object_store type=\"distributed\">\n    &#x3C;backends>\n        &#x3C;backend id=\"files1\" type=\"disk\" weight=\"99\">\n            &#x3C;files_dir path=\"database/files1\"/>\n            &#x3C;extra_dir type=\"temp\" path=\"database/tmp1\"/>\n            &#x3C;extra_dir type=\"job_work\" path=\"database/job_working_directory1\"/>\n        &#x3C;/backend>\n        &#x3C;backend id=\"files2\" type=\"disk\" weight=\"1\">\n            &#x3C;files_dir path=\"database/files2\"/>\n            &#x3C;extra_dir type=\"temp\" path=\"database/tmp2\"/>\n            &#x3C;extra_dir type=\"job_work\" path=\"database/job_working_directory2\"/>\n        &#x3C;/backend>\n    &#x3C;/backends>\n&#x3C;/object_store>\n</code></pre>\n<p>Using this configuration, ObjectStore randomly distributes data\nbetween <code>database/files1</code> and <code>database/files2</code>, with <code>0.99</code> and\n<code>0.01</code> probability selecting the former and latter respectively.</p>\n<p>Additionally, you can define any nested relation of the backends,\nfor instance:</p>\n<pre><code class=\"language-xml\">&#x3C;?xml version=\"1.0\"?>\n&#x3C;object_store type=\"hierarchical\">\n    &#x3C;backends>\n        &#x3C;object_store type=\"distributed\" id=\"primary\" order=\"0\">\n            &#x3C;backends>\n                &#x3C;backend id=\"files1\" type=\"disk\" weight=\"1\">\n                    &#x3C;files_dir path=\"database/files1\"/>\n                    &#x3C;extra_dir type=\"temp\" path=\"database/tmp1\"/>\n                    &#x3C;extra_dir type=\"job_work\" path=\"database/job_working_directory1\"/>\n                &#x3C;/backend>\n                &#x3C;backend id=\"files2\" type=\"disk\" weight=\"1\">\n                    &#x3C;files_dir path=\"database/files2\"/>\n                    &#x3C;extra_dir type=\"temp\" path=\"database/tmp2\"/>\n                    &#x3C;extra_dir type=\"job_work\" path=\"database/job_working_directory2\"/>\n                &#x3C;/backend>\n            &#x3C;/backends>\n        &#x3C;/object_store>\n        &#x3C;object_store type=\"disk\" id=\"secondary\" order=\"1\">\n            &#x3C;files_dir path=\"database/files3\"/>\n            &#x3C;extra_dir type=\"temp\" path=\"database/tmp3\"/>\n            &#x3C;extra_dir type=\"job_work\" path=\"database/job_working_directory3\"/>\n        &#x3C;/object_store>\n    &#x3C;/backends>\n&#x3C;/object_store>\n</code></pre>\n</div>\n"}},"context":{}}