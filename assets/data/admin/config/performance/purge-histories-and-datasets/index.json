{"hash":"eaf962330836a104724e8b210d95933603316eda","data":{"article":{"id":"351057c8ac19af81b499a23842f9ad8b","title":"Cleaning up Dataset Objects","tease":"","category":null,"date":null,"days":null,"contact":"","contact_url":"","authors":"","location":"","location_url":"","source_blog":"","source_blog_url":"","skip_title_render":null,"redirect":"","links":[],"image":"","images":{},"external_url":"","content":"<div class=\"toc-wrapper col-md-3\">\n<ul>\n<li><a href=\"#background-on-dataset-objects\">Background on Dataset Objects</a></li>\n<li>\n<p><a href=\"#purging-unwanted-histories-libraries-and-datasets\">Purging Unwanted Histories, Libraries and Datasets</a></p>\n<ul>\n<li><a href=\"#available-flags\">Available Flags:</a></li>\n<li><a href=\"#deleting-userless-histories\">Deleting Userless Histories</a></li>\n<li><a href=\"#purging-deleted-histories\">Purging Deleted Histories</a></li>\n<li><a href=\"#purging-deleted-datasets\">Purging Deleted Datasets</a></li>\n<li><a href=\"#purging-library-folders\">Purging Library Folders</a></li>\n<li><a href=\"#purging-libraries\">Purging Libraries</a></li>\n<li><a href=\"#deleting-datasets--purging-dataset-instances\">Deleting Datasets / Purging Dataset Instances</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div class=\"body-wrapper col-md-9\">\n<h2 id=\"background-on-dataset-objects\"><a href=\"#background-on-dataset-objects\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Background on Dataset Objects</h2>\n<p>Histories that are displayed in the history panel are stored as records in the\nHistory table in the Galaxy database. Among other columns, the History table\nincludes the following:</p>\n<pre><code>| id | update_time | user_id | deleted | purged |\n</code></pre>\n<p>When a user visits the Galaxy home page for the very first time, a new Galaxy\nsession is created and the session information is stored in a browser cookie. A\nnew history record is automatically created and associated with the session\ncookie. At this point, neither the session nor the history is associated with a\nuser ID since the user has not logged in. Logging in is not required for using\nGalaxy, but if the user logs in, their user ID is associated with both the\nGalaxy session and the previously created history. In this case, the next time\nthe user visits the Galaxy home page and logs in, the history panel displays\nthe history that meets all of the following criteria:</p>\n<ul>\n<li>is associated with their user ID</li>\n<li>contains the latest update time of any of their previously stored histories</li>\n<li>is not deleted ( the history.deleted column contains the value False )</li>\n</ul>\n<p>When the user performs an analysis, items are added to the history which are\neach associated with a dataset. These items are known as\n<code>HistoryDatasetAssociation</code> objects. Information about datasets is stored in the\n<code>Dataset</code> table in the Galaxy database, with the data itself stored on disk. The\nGalaxy configuration file includes a <strong>file_path</strong> attribute which points to\nthe location on disk where the datasets are stored. Among other columns, the\nDataset table includes the following:</p>\n<pre><code>| id | update_time | deleted | purged | file_size |\n</code></pre>\n<p>Among other columns, the <code>HistoryDatasetAssociation</code> table includes the\nfollowing:</p>\n<pre><code>| id | update_time | history_id | deleted | dataset_id |\n</code></pre>\n<p>Every <code>HistoryDatasetAssociation</code> record associates a <code>Dataset</code> with a history\nrecord via the values in the <code>HistoryDatasetAssociation.history_id</code> and\n<code>HistoryDatasetAssociation.dataset_id</code> columns. Any number of\n<code>HistoryDatasetAssociation</code> records can point to a base <code>Dataset</code> -- this is how\ncopying histories, history items, and libraries work without needing to copy\nactual file contents.</p>\n<p>Among other columns, the <code>LibraryDatasetDatasetAssociation</code> table includes the\nfollowing:</p>\n<pre><code>| id | update_time | library_dataset_id | deleted | dataset_id |\n</code></pre>\n<p>Every <code>LibraryDatasetDatasetAssociation</code> record associates a Dataset with a\nversionable library dataset record via the values in the\n<code>LibraryDatasetDatasetAssociation.library_dataset_id</code> and\n<code>LibraryDatasetDatasetAssociation.dataset_id columns</code>. Any number of\n<code>LibraryDatasetDatasetAssociation</code> records can point to a base <code>Dataset</code>.</p>\n<h2 id=\"purging-unwanted-histories-libraries-and-datasets\"><a href=\"#purging-unwanted-histories-libraries-and-datasets\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Purging Unwanted Histories, Libraries and Datasets</h2>\n<p>A <code>Dataset</code> can only be deleted (or purged) when all <code>HistoryDatasetAssociations</code>\nand <code>LibraryDatasetDatasetAssociations</code> have been marked as deleted.</p>\n<p>There are 6 scripts included in the Galaxy distribution that can be used to\nclean up unwanted histories, libraries and datasets. There are located in the\n<code>GALAXY_ROOT/scripts/cleanup_datasets</code> directory and are named:</p>\n<ul>\n<li>delete_userless_histories.sh</li>\n<li>purge_histories.sh</li>\n<li>purge_datasets.sh</li>\n<li>purge_folders.sh</li>\n<li>purge_libraries.sh</li>\n<li>delete_datasets.sh</li>\n</ul>\n<p>Note that you should activate the Galaxy virtual environment before running the scripts, as it follows.</p>\n<pre><code>source /path/to/galaxy/root/.venv/bin/activate\nsh delete_userless_histories.sh\nsh purge_histories.sh\n</code></pre>\n<p>These scripts all execute the Python script in the same directory named\n<code>cleanup_datasets.py</code>, sending different parameter values on the command line. If\ndesired, these scripts can be ignored and the <code>cleanup_datasets.py</code> scripts can\nbe executed manually (using the <code>GALAXY_ROOT</code> as the working directory), passing\nin desired parameter values. However, these scripts can be easily configured in\ncron to execute automatically. The order in which the scripts are executed will\naffect the outcome; for best results, the recommended running order is:</p>\n<ol>\n<li>delete_userless_histories.sh</li>\n<li>purge_histories.sh</li>\n<li>purge_libraries.sh</li>\n<li>purge_folders.sh</li>\n<li>purge_datasets.sh</li>\n</ol>\n<p>If it is desired that datasets be removed before their outer container\n(history, library/library folder) has been deleted, the <code>delete_datasets.sh</code>\nscript can be used before the <code>purge_datasets.sh</code> script. This script may take\nsome time to complete.</p>\n<h3 id=\"available-flags\"><a href=\"#available-flags\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Available Flags:</h3>\n<table>\n<thead>\n<tr>\n<th>flag</th>\n<th>short</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>--days</td>\n<td>-d</td>\n<td>number of days (60) to use as a cut off; do not act on objects updated more recently than this</td>\n</tr>\n<tr>\n<td>--info_only</td>\n<td>-i</td>\n<td>only provide info about the requested action; no changes saved to database</td>\n</tr>\n<tr>\n<td>--remove_from_disk</td>\n<td>-r</td>\n<td>remove files from disk during operations</td>\n</tr>\n<tr>\n<td>--force_retry</td>\n<td>-f</td>\n<td>performs the requested actions, but ignores whether it might have been done before. Useful when -r wasn't used, but should have been</td>\n</tr>\n<tr>\n<td>--delete_userless_histories</td>\n<td>-1</td>\n<td>delete userless histories and datasets</td>\n</tr>\n<tr>\n<td>--purge_histories</td>\n<td>-2</td>\n<td>purge deleted histories</td>\n</tr>\n<tr>\n<td>--purge_datasets</td>\n<td>-3</td>\n<td>purge deleted datasets</td>\n</tr>\n<tr>\n<td>--purge_libraries</td>\n<td>-4</td>\n<td>purge deleted libraries</td>\n</tr>\n<tr>\n<td>--purge_folders</td>\n<td>-5</td>\n<td>purge deleted library folders</td>\n</tr>\n<tr>\n<td>--delete_datasets</td>\n<td>-6</td>\n<td>mark deletable datasets as deleted and purge associated dataset instances</td>\n</tr>\n</tbody>\n</table>\n<p>Here are more details about each of the functions that the <code>cleanup_datasets.py</code>\nscript can perform. Note that, in order to run the python script separately\nyou need to 1) activate Galaxy's virtual environment and 2) change into Galaxy's root\ndirectory. Alternatively to 2) one can specify the galaxy configuration (galaxy.[yml|ini])\nextra parameter.</p>\n<h3 id=\"deleting-userless-histories\"><a href=\"#deleting-userless-histories\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Deleting Userless Histories</h3>\n<p>As mentioned above, logging in is not required for using Galaxy, and in many\ncases users perform an analysis without logging in to review results in a\n\"1-off\" fashion, not caring about keeping the analysis for later review. In\nthis case, history record(s) are created with no associated user ID. The\ncleanup_dataset.py script can be used to delete these types of histories that\nhave not been altered for a specified period of time. The command for deleting\nuserless histories is something like:</p>\n<pre><code>python cleanup_datasets.py -d 60 -1\n</code></pre>\n<p>Notice that the first parameter passed into the script is the Galaxy\nconfiguration file. This is necessary for the script to acquire information\nabout the database connection and the location of data files on disk. The value\nfollowing the -d flag is the span of time in days that has passed since a\nhistory was last updated ( i.e., the value in the <code>History.update_time</code> column is\nolder than 60 days in this example ). Based on this criteria, all <code>History</code>\nrecords that do not include a value in the <code>user_id</code> column and whose <code>update_time</code>\ncolumn value is older than 60 days will be retrieved. The -1 flag tells the\n<code>cleanup_datasets.py</code> script to execute the method named\n<code>delete_userless_histories()</code>, which is included in the script. This method\ndeletes userless histories whose <code>update_time</code> value is older than the specified\nnumber of days by setting the value of the <code>History.delete</code> column to <code>True</code>.\nExecuting the same command, but providing the -i flag will not write any\nchanges; info about the histories to be deleted will be provided.</p>\n<h3 id=\"purging-deleted-histories\"><a href=\"#purging-deleted-histories\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Purging Deleted Histories</h3>\n<p>In the lifecycle of a <code>History</code> record, the stage following the \"deleted\" stage\nis the \"purged\" stage, the last stage in the <code>History</code> record's lifecycle. When a\n<code>History</code> record is purged, all <code>HistoryDatasetAssociation</code> records associated with\nthe History record are purged. When a <code>HistoryDatasetAssociation</code> is purged, it\nis marked as deleted. Addionally the Dataset associated with the HDA is marked\nas deleted only if all associations to that <code>Dataset</code> are also purged (HDA &#x26; LDDA\nare all marked as deleted); when this happens, HDAs and LDDAs are no longer\nundeletable by the user - if '-r' is used the associated files and metadata\nfiles are removed from disk (the primary Dataset File still remains on disk and\ncan be retrieved by an admin) . The command for purging histories and\nassociated HDAs is something like:</p>\n<pre><code>python cleanup_datasets.py -d 60 -2 -r\n</code></pre>\n<p>In this example, the -2 flag tells the <code>cleanup_dataset.py</code> script to execute the\n<code>purge_histories()</code> method included in the script. This method retrieves all\n<code>History</code> records whose <code>History.deleted</code> column value is True, <code>History.purged</code>\ncolumn value is <code>False</code> and whose <code>History.update_time</code> column value is older than\nthe specified number of days ( 60 in this example ). All\n<code>HistoryDatasetAssociation</code> records associated with the History record are also\npurged by setting the <code>HistoryDatasetAssociation.deleted</code> column value to <code>True</code>;\nany additional <code>DatasetAssociations</code> (HDA/LDDA) are polled and if they all have\n<code>HistoryDatasetAssociation.deleted==True</code>, the <code>Dataset.deleted</code> column is set to\n<code>True</code>. The -r flag in this example tells the <code>cleanup_dataset.py</code> script to remove\nthe files (metadata etc) associated with the <code>HistoryDatasetAssociation</code> record\nfrom disk (only if <code>Dataset.deleted</code> is to be set to True). Executing the same\ncommand but replacing the -r flag with -i will print out all of the <code>History</code> and\nassociated <code>HistoryDatasetAssociation</code> records that will be purged if the -r flag\nis used.</p>\n<h3 id=\"purging-deleted-datasets\"><a href=\"#purging-deleted-datasets\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Purging Deleted Datasets</h3>\n<p>Dataset records are moved to the \"deleted\" stage when all <code>History</code> and <code>Library</code>\nrecords associated with the dataset are deleted as described above.</p>\n<p>The next stage in the lifecycle of a deleted Dataset record is the \"purged\"\nstage, the last stage in the <code>Dataset</code> record's lifecycle. The command for\npurging datasets is something like:</p>\n<pre><code>python cleanup_datasets.py -d 60 -3 -r\n</code></pre>\n<p>In this example, the -3 flag tells the <code>cleanup_dataset.py</code> script to execute the\n<code>purge_datasets()</code> method included in the script. This method retrieves all\n<code>Dataset</code> records whose <code>Dataset.deleted</code> column value is True, <code>Dataset.purged</code> is\n<code>False</code> and whose <code>Dataset.update_time</code> column value is older than the specified\nnumber of days ( 60 in this example ). The Dataset records are purged by\nsetting the <code>Dataset.purged</code> column to True. As described above, the -r flag in\nthis example tells the <code>cleanup_dataset.py</code> script to remove the data file\nassociated with the Dataset record from disk. Executing the same command but\nreplacing the -r flag with -i will print out all of the Dataset records that\nwill be purged if the -r flag is used.</p>\n<h3 id=\"purging-library-folders\"><a href=\"#purging-library-folders\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Purging Library Folders</h3>\n<p>Besides existing in user's history, dataset association objects exist with in\n<code>Library</code> Folders; they are known as <code>LibraryDatasetDatasetAssociations</code> (LDDAs).\nPurging a library folder is similar to purging a History. An example command\nis:</p>\n<pre><code>python cleanup_datasets.py -d 60 -5 -r\n</code></pre>\n<p>In this example, the -5 flag tells the <code>cleanup_dataset.py</code> script to execute the\n<code>purge_folders()</code> method included in the script. This method retrieves all\n<code>LibraryFolder</code> records whose <code>LibraryFolder.deleted</code> column value is <code>True</code>,\n<code>LibraryFolder.purged</code> column value is <code>False</code> and whose <code>LibraryFolder.update_time</code>\ncolumn value is older than the specified number of days ( 60 in this example ).\nIt works recursively on all subfolders and their contents. All\n<code>LibraryDatasetDatasetAssociations</code> records associated with the <code>LibraryFolder</code>\nrecord are also purged by setting the <code>LibraryDatasetDatasetAssociation.deleted</code>\ncolumn value to <code>True</code>; any additional <code>DatasetAssociations</code> (HDA/LDDA) are polled\nand if they all have\n<code>HistoryDatasetAssociation(LibraryDatasetDatasetAssociation).deleted==True</code>, the\n<code>Dataset.deleted</code> column is set to <code>True</code>. The -r flag in this example tells the\n<code>cleanup_dataset.py</code> script to remove the files (metadata etc) associated with\nthe <code>LibraryDatasetDatasetAssociation</code> record (but not the actual Dataset file)\nfrom disk (only if <code>Dataset.deleted</code> is to be set to <code>True</code>). Executing the same\ncommand but replacing the -r flag with -i will print out all of the\n<code>LibraryFolders</code> and associated <code>LibraryDatasetDatasetAssociation</code> records that\nwill be purged if the -r flag is used.</p>\n<p>As is the case with <code>Histories</code>, the <code>purge_datasets</code> script will need to be used\nto remove actual Datasets from disk.</p>\n<h3 id=\"purging-libraries\"><a href=\"#purging-libraries\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Purging Libraries</h3>\n<p>Purging a library is similar to purging a <code>LibraryFolder</code>. All libraries which\nare not purged, but are deleted and exceed the modified date are retrieved. The\nlibrary is marked as purged and <code>purge_folder</code> is called on the library's root\nfolder, deleting all contents. An example command is:</p>\n<pre><code>python cleanup_datasets.py -d 60 -4 -r\n</code></pre>\n<p>In this example, the -4 flag tells the <code>cleanup_dataset.py</code> script to execute the\n<code>purge_libraries()</code> method included in the script. This method retrieves all\n<code>Library</code> records whose <code>Library.deleted</code> column value is True, <code>Library.purged</code>\ncolumn value is False and whose <code>LibraryFolder.update_time</code> column value is older\nthan the specified number of days ( 60 in this example ). The Library's Root\nFolder is then obtained and all <code>LibraryDatasetDatasetAssociations</code> records\nassociated with the <code>LibraryFolder</code> record are also purged by setting the\n<code>LibraryDatasetDatasetAssociation.deleted</code> column value to <code>True</code>; any additional\n<code>DatasetAssociations</code> (HDA/LDDA) are polled and if they all have\n<code>HistoryDatasetAssociation(LibraryDatasetDatasetAssociation).deleted==True</code>, the\n<code>Dataset.deleted</code> column is set to <code>True</code>. The -r flag in this example tells the\n<code>cleanup_dataset.py</code> script to remove the files (metadata etc) associated with\nthe <code>LibraryDatasetDatasetAssociation</code> record (but not the actual Dataset file)\nfrom disk (only if Dataset.deleted is to be set to True). Executing the same\ncommand but replacing the -r flag with -i will print out all of the <code>Libraries</code>,\n<code>LibraryFolders</code> and associated <code>LibraryDatasetDatasetAssociation</code> records that\nwill be purged if the -r flag is used.</p>\n<h3 id=\"deleting-datasets--purging-dataset-instances\"><a href=\"#deleting-datasets--purging-dataset-instances\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Deleting Datasets / Purging Dataset Instances</h3>\n<p>There are times when it is not desirable to wait for the containing <code>history</code> or\n<code>library/library</code> folder to be deleted before purging a dataset instance and\nmarking the base dataset as deleted. The -6 flag is used for this purpose. This\nscript will find all Dataset records which are not deleted but are associated\nwith a <code>DatasetAssociation</code> that is marked as deleted and updated according to\nthe specified cut-off. If all associations are marked as deleted, the <code>Dataset</code>\nis marked as deleted and each <code>DatasetAssociation</code> is purged. The\n<code>purge_datasets.sh</code> script will need to be run afterwards to remove the base\ndatasets from disk.</p>\n<p>An example command is: <code>python cleanup_datasets.py -d 60 -6 -r</code></p>\n</div>\n"}},"context":{}}