{"hash":"4f66c62fb6940f4cd6ecf5e4a1e2d62361ec5ff4","data":{"article":{"id":"9fd718199b94b8641e19ebf94d91cadd","title":"Apache External User Authentication","tease":"","category":null,"date":null,"days":null,"contact":"","contact_url":"","fileInfo":{"path":"build/content-md/admin/config/apache-external-user-auth/index.md"},"authors":"","location":"","location_url":"","source_blog":"","source_blog_url":"","skip_title_render":null,"redirect":"","autotoc":null,"links":[],"image":"","images":{},"external_url":"","content":"<div class=\"toc-wrapper col-md-3\">\n<ul>\n<li>\n<p><a href=\"#apache-external-authentication\">Apache External Authentication</a></p>\n<ul>\n<li>\n<p><a href=\"#generic-galaxy-configuration\">Generic Galaxy Configuration</a></p>\n<ul>\n<li><a href=\"#api-exception\">API Exception</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#basic-authentication\">Basic Authentication</a></p>\n<ul>\n<li><a href=\"#mod_authnz_ldap\"><code>mod_authnz_ldap</code></a></li>\n</ul>\n</li>\n<li><a href=\"#mod_auth_kerb\"><code>mod_auth_kerb</code></a></li>\n<li>\n<p><a href=\"#logging-out-basic-authd-users\">Logging out Basic Auth'd Users</a></p>\n<ul>\n<li><a href=\"#creating-the-logout-area\">Creating the Logout area</a></li>\n<li><a href=\"#galaxy-configuration-modifications\">Galaxy Configuration Modifications</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<div class=\"body-wrapper col-md-9\">\n<h1 id=\"apache-external-authentication\"><a href=\"#apache-external-authentication\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Apache External Authentication</h1>\n<p>By default, Galaxy manages its own users. However, it may be more useful at your site to tie into a local authentication system. Galaxy does not do this itself - it delegates this responsibility to the upstream proxy server.</p>\n<p>The authentication module (basic authentication, <code>mod_auth_kerb</code>, <code>mod_authnz_ldap</code>, <code>mod_auth_cas</code>, <code>Cosign</code>, etc.) is responsible for providing a username, which we will pass through the proxy to Galaxy as <code>$REMOTE_USER</code>.</p>\n<p>In addition to the chosen module above, <code>mod_headers</code> must be enabled in the Apache config, for some types of authentication.</p>\n<h2 id=\"generic-galaxy-configuration\"><a href=\"#generic-galaxy-configuration\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Generic Galaxy Configuration</h2>\n<div class=\"alert alert-warning\" role=\"alert\">\nThis section applies to all authentication methods.\n</div>\n<p>On the Galaxy side, set <code>use_remote_user = True</code> in <code>galaxy.ini</code>. If your auth method doesn't provide a full email address in <code>$(REMOTE_USER</code>, you'll also need to set <code>remote_user_maildomain</code>:</p>\n<pre><code>use_remote_user = True\nremote_user_maildomain = example.org\n</code></pre>\n<p>For example, when using basic authentication, only bare usernames (e.g. \"<code>nate</code>\") will be passed to Galaxy. Since Galaxy usernames are full email addresses, <code>remote_user_maildomain</code> needs to be set (e.g. to \"<code>example.org</code>\"). On the other hand, auth methods such as <code>mod_auth_kerb</code> set the full <code>nate@example.org</code> address, so <code>remote_user_maildomain</code> should not be set. If you're not sure, Galaxy will tell you via an error message if <code>remote_user_maildomain</code> needs to be set.</p>\n<p>Users are automatically created in the Galaxy database if the external auth method allows them through. Users created in this manner may not log in if <code>use_remote_user</code> is later disabled, since Galaxy does not have a password stored for the user (since the password is managed by the upstream proxy server.)</p>\n<h3 id=\"api-exception\"><a href=\"#api-exception\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>API Exception</h3>\n<p>If you wish your Galaxy to be accessible to command line clients (e.g. bioblend, blend4j, parsec), you will need to add an exception for authentication on the API. Galaxy will still be secure and protected, but non-browser access will be permitted with an API key. If this exception is not provided, many clients will throw errors as they are redirected to the login site under CAS type authentication, or rejected with unauthorized exception.</p>\n<pre><code class=\"language-apache\">&#x3C;Location \"/api/\">\n    Satisfy Any\n    Allow from all\n&#x3C;/Location>\n</code></pre>\n<h2 id=\"basic-authentication\"><a href=\"#basic-authentication\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Basic Authentication</h2>\n<p>Basic authentication is configured as it is for any other protected portion of your site (other authentication modules are configured differently):</p>\n<pre><code class=\"language-apache\">AuthType Basic\nAuthName Galaxy\nAuthUserFile /home/nate/htpasswd\nRequire valid-user\n</code></pre>\n<p>The following options are used to take the <code>$REMOTE_USER</code> variable (set by basic authentication) and set it as a header in the proxied environment:</p>\n<pre><code class=\"language-apache\">&#x3C;Proxy http://localhost:8080>\n    Order deny,allow\n    Allow from all\n&#x3C;/Proxy>\n# Take the $REMOTE_USER environment variable and set it as a header in the proxy request.\nRewriteEngine on\nRewriteCond %{IS_SUBREQ} ^false$\nRewriteCond %{LA-U:REMOTE_USER} (.+)\nRewriteRule . - [E=RU:%1]\nRequestHeader set REMOTE_USER %{RU}e\n</code></pre>\n<p>These new directives should be placed in a <code>&#x3C;Location></code> block, depending on the directory from which you are serving Galaxy. Your entire configuration will now look something like this:</p>\n<pre><code class=\"language-apache\">&#x3C;Proxy http://localhost:8080>\n    Order deny,allow\n    Allow from all\n&#x3C;/Proxy>\n\nRewriteEngine on\n&#x3C;Location \"/\">\n    # Define the authentication method\n    AuthType Basic\n    AuthName Galaxy\n    AuthUserFile /home/galaxy/htpasswd # Change this to your htpasswd file location\n    Require valid-user\n    # Take the $REMOTE_USER environment variable and set it as a header in the proxy request.\n    RewriteCond %{IS_SUBREQ} ^false$\n    RewriteCond %{LA-U:REMOTE_USER} (.+)\n    RewriteRule . - [E=RU:%1]\n    RequestHeader set REMOTE_USER %{RU}e\n&#x3C;/Location>\n</code></pre>\n<h3 id=\"mod_authnz_ldap\"><a href=\"#mod_authnz_ldap\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code>mod_authnz_ldap</code></h3>\n<p>The Apache <code>mod_authnz_ldap</code> module does not set <code>$REMOTE_USER</code> like other auth modules. The following alternate configuration should allow you to use any LDAP attribute as the username to set in <code>$REMOTE_USER</code>:</p>\n<pre><code class=\"language-apache\">&#x3C;Proxy http://localhost:8080>\n    Order deny,allow\n    Allow from all\n&#x3C;/Proxy>\n\n&#x3C;Location \"/\">\n    AuthType Basic\n    AuthBasicProvider ldap\n    AuthLDAPURL \"ldaps://ldap.example.com:636/ou=People,dc=example,dc=org?uid?sub?(objectClass=person)\"\n    Require valid-user\n\n    # Set the REMOTE_USER header to the contents of the LDAP query response's \"uid\" attribute\n    RequestHeader set REMOTE_USER %{AUTHENTICATE_uid}e\n&#x3C;/Location>\n</code></pre>\n<p>The <code>AuthLDAPURL</code> and variable in which the username is set will vary and is dependent entirely upon the schema/design of your LDAP database. If your LDAP server is Windows (Active Directory), you may need to use the <code>%{AUTHENTICATE_sAMAccountName}</code> variable.</p>\n<p>Note the S/E after substituted variables, transcluded from the <a href=\"https://httpd.apache.org/docs/2.2/mod/mod_headers.html\" target=\"_blank\" rel=\"noopener noreferrer\">Apache mod_headers</a> documentation:</p>\n<p>Variable | Value\n-------- | ------\n<code>%{FOOBAR}e</code> | The contents of the environment variable FOOBAR.\n<code>%{FOOBAR}s</code> | The contents of the SSL environment variable FOOBAR, if mod_ssl is enabled.</p>\n<p>(If anyone has information regarding setting the username under non-https conditions, please provide it!)</p>\n<h2 id=\"mod_auth_kerb\"><a href=\"#mod_auth_kerb\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code>mod_auth_kerb</code></h2>\n<p>If you are deploying kerberos, it is assumed you know the basics of configuring kerberos enabled webpages.</p>\n<pre><code class=\"language-apache\">&#x3C;Location \"/\">\n        AuthName \"Galaxy\"\n        AuthType Kerberos\n        KrbAuthRealms REALM.EDU\n        KrbServiceName HTTP/server.realm.edu@REALM.EDU\n        Krb5Keytab /etc/http_server_realm.edu.keytab\n        KrbSaveCredentials On\n        Require valid-user\n\n        RequestHeader set REMOTE_USER %{REMOTE_USER}s\n&#x3C;/Location>\n</code></pre>\n<p>We chose to seperate out the keytab for apache, hence the use of Krb5Keytab. Normally that defaults to <code>/etc/krb5.keytab</code>.</p>\n<p>Note the S/E after substituted variables, transcluded from the <a href=\"https://httpd.apache.org/docs/2.2/mod/mod_headers.html\" target=\"_blank\" rel=\"noopener noreferrer\">Apache mod_headers</a> documentation:</p>\n<p>Variable | Value\n-------- | ------\n<code>%{FOOBAR}e</code> | The contents of the environment variable FOOBAR.\n<code>%{FOOBAR}s</code> | The contents of the SSL environment variable FOOBAR, if mod_ssl is enabled.</p>\n<p>(If anyone has information regarding setting the username under non-https conditions, please provide it!)</p>\n<h2 id=\"logging-out-basic-authd-users\"><a href=\"#logging-out-basic-authd-users\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Logging out Basic Auth'd Users</h2>\n<p>It's <a href=\"https://httpd.apache.org/docs/1.3/howto/auth.html#basicfaq\" target=\"_blank\" rel=\"noopener noreferrer\">not supposed to be possible</a> due to how HTTP authentication works.</p>\n<p>However, this is a common problem and many people have come up with varying quality solutions:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/4163122/http-basic-authentication-log-out/\" target=\"_blank\" rel=\"noopener noreferrer\">https://stackoverflow.com/questions/4163122/http-basic-authentication-log-out/</a></li>\n<li><a href=\"https://stackoverflow.com/questions/233507/how-to-log-out-user-from-web-site-using-basic-authentication\" target=\"_blank\" rel=\"noopener noreferrer\">https://stackoverflow.com/questions/233507/how-to-log-out-user-from-web-site-using-basic-authentication</a></li>\n<li><a href=\"https://trac-hacks.org/wiki/TrueHttpLogoutPatch\" target=\"_blank\" rel=\"noopener noreferrer\">https://trac-hacks.org/wiki/TrueHttpLogoutPatch</a></li>\n</ul>\n<p>This was <a href=\"https://lists.galaxyproject.org/archives/list/galaxy-dev@lists.galaxyproject.org/thread/5T5EW5P5VDHXEH3ZDY43N4EXD3OW4OSQ/#5T5EW5P5VDHXEH3ZDY43N4EXD3OW4OSQ\" target=\"_blank\" rel=\"noopener noreferrer\">discussed on the galaxy-dev mailing list</a>, and the solution provided by Tim Booth is detailed below. Please test this thoroughly before using it in your galaxy.</p>\n<h3 id=\"creating-the-logout-area\"><a href=\"#creating-the-logout-area\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Creating the Logout area</h3>\n<p>A world-accessible folder needs to be created, probably named something like \"logout\". Taking <code>/usr/share/galaxy-server/logout/</code> as our example, inside that folder you need to create a .htaccess file</p>\n<pre><code># Hack based on http://stackoverflow.com/questions/4163122/http-basic-authentication-log-out\n# Authname must match the one for your galaxy server.\n\nAuthType Basic\nAuthName Galaxy_Server\n\nAuthUserFile /usr/share/galaxy-server/logout/.htpasswd\nRequire user logout\n</code></pre>\n<p>The <code>/usr/share/galaxy-server/logout/.htpasswd</code> file should contain</p>\n<pre><code>#Password is logout. This in not a secret.\nlogout:$apr1$0eB1iURY$kwqa0c8tXksbjPQLYqr6s.\n</code></pre>\n<h3 id=\"galaxy-configuration-modifications\"><a href=\"#galaxy-configuration-modifications\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Galaxy Configuration Modifications</h3>\n<p>You will probably need to add the following to your <code>$GALAXY_ROOT/config/galaxy.ini</code>:</p>\n<pre><code># Not yet tested on IE.\nremote_user_logout_href = javascript:var r=new XMLHttpRequest();r.onreadystatechange=function(){if(r.readyState==4)window.location.replace('logout.html')};r.open('get','logout.html',true,'logout','logout');r.send();\n</code></pre>\n<p>This code sends an AJAX request to <code>logout.html</code> with the username and password of \"logout\" (variables 4 and 5 in the <code>r.open</code> snippet)</p>\n</div>\n"}},"context":{}}