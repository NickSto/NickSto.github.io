{"hash":"14e186fd360947c1255e65c919a062692f477385","data":{"article":{"id":"cb8401a8149bbbddef38719389482c89","title":"","tease":"","image":"","images":{},"category":null,"contact":"","date":null,"content":"<h1 id=\"supported-python-versions\"><a href=\"#supported-python-versions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Supported Python versions</h1>\n<p>Galaxy's core functionality is currently supported on Python <strong>3.5</strong> and <strong>3.6</strong>.</p>\n<p>If Galaxy complains about the version of Python you are using:</p>\n<ol>\n<li>Completely remove the Python virtualenv used by Galaxy (which can be\nconfigured with the <code>GALAXY_VIRTUAL_ENV</code> environment variable and defaults to\n<code>.venv</code>), e.g. with: <code>rm -rf /path/to/galaxy/.venv</code></li>\n<li>If you were using a Python from a conda environment (which can be configured\nwith the <code>GALAXY_CONDA_ENV</code> environment variable and defaults to <code>_galaxy_</code>),\nremove it, e.g. with: <code>conda env remove -n _galaxy_</code></li>\n<li>\n<p>Let Galaxy know which Python to use in one of the following methods:</p>\n<ul>\n<li>If you want to use Python from conda, just activate the <code>base</code> environment\nand Galaxy will create a new conda environment for itself.</li>\n<li>\n<p>Otherwise:</p>\n<ol>\n<li>Make sure a supported version of Python is installed.</li>\n<li>\n<p>Verify that the Python interpreter you want to use is first in the\noutput of <code>which -a python3 python</code> (or <code>which -a python</code> if you are\nusing Galaxy &#x3C;=19.09). If this is not the case:</p>\n<ul>\n<li>If you are using Galaxy >= 20.01, just execute:\n<code>export GALAXY_PYTHON=/path/to/python</code></li>\n<li>\n<p>If instead you are using an older version of Galaxy, you can\nmanipulate your shell's <code>PATH</code> variable to place the correct version\nfirst. This can be done for just Python by creating a new directory,\nadding a symbolic link to <code>python</code> in there, and putting that\ndirectory at the front of <code>PATH</code>:</p>\n<pre><code class=\"language-sh\">% mkdir ~/galaxy-python\n% ln -s /path/to/python ~/galaxy-python/python\n% export PATH=~/galaxy-python:$PATH\n</code></pre>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>Remove compiled mako templates when upgrading from Python 2:\n<code>sh % rm -rf /path/to/galaxy/database/compiled_templates/</code>\nThese templated will be regenerated automatically when starting Galaxy.</li>\n<li>Start Galaxy again.</li>\n</ol>\n<p>N.B. If you have compiled your own Python interpreter from source, please ensure\nthat the <code>ssl</code>, <code>sqlite3</code>, <code>curses</code> and <code>bz2</code> modules were built and can be\nimported after installation. These \"extra\" modules are built at the end of the\ncompilation process and are required by the Galaxy framework. If building on\nLinux, you may need to install the appropriate <code>-dev</code> packages for OpenSSL and\nBzip2. You may also need to build Python with shared libraries\n(<code>--enable-shared</code>).</p>\n"}},"context":{}}